/*
 * Saxobank trading API
 * Saxobank trading API
 *
 * OpenAPI spec version: 0.1-oas3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package saxobank.home.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * NetPositionsMePositionView
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T17:11:38.297188217Z[GMT]")

public class NetPositionsMePositionView {
  @SerializedName("CalculationReliability")
  private String calculationReliability = null;

  @SerializedName("ConversionRateCurrent")
  private BigDecimal conversionRateCurrent = null;

  @SerializedName("ConversionRateOpen")
  private BigDecimal conversionRateOpen = null;

  @SerializedName("CurrentPrice")
  private BigDecimal currentPrice = null;

  @SerializedName("CurrentPriceDelayMinutes")
  private BigDecimal currentPriceDelayMinutes = null;

  @SerializedName("CurrentPriceType")
  private String currentPriceType = null;

  @SerializedName("Exposure")
  private BigDecimal exposure = null;

  @SerializedName("ExposureCurrency")
  private String exposureCurrency = null;

  @SerializedName("ExposureInBaseCurrency")
  private BigDecimal exposureInBaseCurrency = null;

  @SerializedName("InstrumentPriceDayPercentChange")
  private BigDecimal instrumentPriceDayPercentChange = null;

  @SerializedName("MarketState")
  private String marketState = null;

  @SerializedName("MarketValue")
  private BigDecimal marketValue = null;

  @SerializedName("MarketValueInBaseCurrency")
  private BigDecimal marketValueInBaseCurrency = null;

  @SerializedName("MarketValueOpen")
  private BigDecimal marketValueOpen = null;

  @SerializedName("MarketValueOpenInBaseCurrency")
  private BigDecimal marketValueOpenInBaseCurrency = null;

  @SerializedName("ProfitLossCurrencyConversion")
  private BigDecimal profitLossCurrencyConversion = null;

  @SerializedName("ProfitLossOnTrade")
  private BigDecimal profitLossOnTrade = null;

  @SerializedName("ProfitLossOnTradeInBaseCurrency")
  private BigDecimal profitLossOnTradeInBaseCurrency = null;

  @SerializedName("TradeCostsTotal")
  private BigDecimal tradeCostsTotal = null;

  @SerializedName("TradeCostsTotalInBaseCurrency")
  private BigDecimal tradeCostsTotalInBaseCurrency = null;

  @SerializedName("UnderlyingCurrentPrice")
  private BigDecimal underlyingCurrentPrice = null;

  public NetPositionsMePositionView calculationReliability(String calculationReliability) {
    this.calculationReliability = calculationReliability;
    return this;
  }

   /**
   * Get calculationReliability
   * @return calculationReliability
  **/
  @Schema(description = "")
  public String getCalculationReliability() {
    return calculationReliability;
  }

  public void setCalculationReliability(String calculationReliability) {
    this.calculationReliability = calculationReliability;
  }

  public NetPositionsMePositionView conversionRateCurrent(BigDecimal conversionRateCurrent) {
    this.conversionRateCurrent = conversionRateCurrent;
    return this;
  }

   /**
   * Get conversionRateCurrent
   * @return conversionRateCurrent
  **/
  @Schema(description = "")
  public BigDecimal getConversionRateCurrent() {
    return conversionRateCurrent;
  }

  public void setConversionRateCurrent(BigDecimal conversionRateCurrent) {
    this.conversionRateCurrent = conversionRateCurrent;
  }

  public NetPositionsMePositionView conversionRateOpen(BigDecimal conversionRateOpen) {
    this.conversionRateOpen = conversionRateOpen;
    return this;
  }

   /**
   * Get conversionRateOpen
   * @return conversionRateOpen
  **/
  @Schema(description = "")
  public BigDecimal getConversionRateOpen() {
    return conversionRateOpen;
  }

  public void setConversionRateOpen(BigDecimal conversionRateOpen) {
    this.conversionRateOpen = conversionRateOpen;
  }

  public NetPositionsMePositionView currentPrice(BigDecimal currentPrice) {
    this.currentPrice = currentPrice;
    return this;
  }

   /**
   * Get currentPrice
   * @return currentPrice
  **/
  @Schema(description = "")
  public BigDecimal getCurrentPrice() {
    return currentPrice;
  }

  public void setCurrentPrice(BigDecimal currentPrice) {
    this.currentPrice = currentPrice;
  }

  public NetPositionsMePositionView currentPriceDelayMinutes(BigDecimal currentPriceDelayMinutes) {
    this.currentPriceDelayMinutes = currentPriceDelayMinutes;
    return this;
  }

   /**
   * Get currentPriceDelayMinutes
   * @return currentPriceDelayMinutes
  **/
  @Schema(description = "")
  public BigDecimal getCurrentPriceDelayMinutes() {
    return currentPriceDelayMinutes;
  }

  public void setCurrentPriceDelayMinutes(BigDecimal currentPriceDelayMinutes) {
    this.currentPriceDelayMinutes = currentPriceDelayMinutes;
  }

  public NetPositionsMePositionView currentPriceType(String currentPriceType) {
    this.currentPriceType = currentPriceType;
    return this;
  }

   /**
   * Get currentPriceType
   * @return currentPriceType
  **/
  @Schema(description = "")
  public String getCurrentPriceType() {
    return currentPriceType;
  }

  public void setCurrentPriceType(String currentPriceType) {
    this.currentPriceType = currentPriceType;
  }

  public NetPositionsMePositionView exposure(BigDecimal exposure) {
    this.exposure = exposure;
    return this;
  }

   /**
   * Get exposure
   * @return exposure
  **/
  @Schema(description = "")
  public BigDecimal getExposure() {
    return exposure;
  }

  public void setExposure(BigDecimal exposure) {
    this.exposure = exposure;
  }

  public NetPositionsMePositionView exposureCurrency(String exposureCurrency) {
    this.exposureCurrency = exposureCurrency;
    return this;
  }

   /**
   * Get exposureCurrency
   * @return exposureCurrency
  **/
  @Schema(description = "")
  public String getExposureCurrency() {
    return exposureCurrency;
  }

  public void setExposureCurrency(String exposureCurrency) {
    this.exposureCurrency = exposureCurrency;
  }

  public NetPositionsMePositionView exposureInBaseCurrency(BigDecimal exposureInBaseCurrency) {
    this.exposureInBaseCurrency = exposureInBaseCurrency;
    return this;
  }

   /**
   * Get exposureInBaseCurrency
   * @return exposureInBaseCurrency
  **/
  @Schema(description = "")
  public BigDecimal getExposureInBaseCurrency() {
    return exposureInBaseCurrency;
  }

  public void setExposureInBaseCurrency(BigDecimal exposureInBaseCurrency) {
    this.exposureInBaseCurrency = exposureInBaseCurrency;
  }

  public NetPositionsMePositionView instrumentPriceDayPercentChange(BigDecimal instrumentPriceDayPercentChange) {
    this.instrumentPriceDayPercentChange = instrumentPriceDayPercentChange;
    return this;
  }

   /**
   * Get instrumentPriceDayPercentChange
   * @return instrumentPriceDayPercentChange
  **/
  @Schema(description = "")
  public BigDecimal getInstrumentPriceDayPercentChange() {
    return instrumentPriceDayPercentChange;
  }

  public void setInstrumentPriceDayPercentChange(BigDecimal instrumentPriceDayPercentChange) {
    this.instrumentPriceDayPercentChange = instrumentPriceDayPercentChange;
  }

  public NetPositionsMePositionView marketState(String marketState) {
    this.marketState = marketState;
    return this;
  }

   /**
   * Get marketState
   * @return marketState
  **/
  @Schema(description = "")
  public String getMarketState() {
    return marketState;
  }

  public void setMarketState(String marketState) {
    this.marketState = marketState;
  }

  public NetPositionsMePositionView marketValue(BigDecimal marketValue) {
    this.marketValue = marketValue;
    return this;
  }

   /**
   * Get marketValue
   * @return marketValue
  **/
  @Schema(description = "")
  public BigDecimal getMarketValue() {
    return marketValue;
  }

  public void setMarketValue(BigDecimal marketValue) {
    this.marketValue = marketValue;
  }

  public NetPositionsMePositionView marketValueInBaseCurrency(BigDecimal marketValueInBaseCurrency) {
    this.marketValueInBaseCurrency = marketValueInBaseCurrency;
    return this;
  }

   /**
   * Get marketValueInBaseCurrency
   * @return marketValueInBaseCurrency
  **/
  @Schema(description = "")
  public BigDecimal getMarketValueInBaseCurrency() {
    return marketValueInBaseCurrency;
  }

  public void setMarketValueInBaseCurrency(BigDecimal marketValueInBaseCurrency) {
    this.marketValueInBaseCurrency = marketValueInBaseCurrency;
  }

  public NetPositionsMePositionView marketValueOpen(BigDecimal marketValueOpen) {
    this.marketValueOpen = marketValueOpen;
    return this;
  }

   /**
   * Get marketValueOpen
   * @return marketValueOpen
  **/
  @Schema(description = "")
  public BigDecimal getMarketValueOpen() {
    return marketValueOpen;
  }

  public void setMarketValueOpen(BigDecimal marketValueOpen) {
    this.marketValueOpen = marketValueOpen;
  }

  public NetPositionsMePositionView marketValueOpenInBaseCurrency(BigDecimal marketValueOpenInBaseCurrency) {
    this.marketValueOpenInBaseCurrency = marketValueOpenInBaseCurrency;
    return this;
  }

   /**
   * Get marketValueOpenInBaseCurrency
   * @return marketValueOpenInBaseCurrency
  **/
  @Schema(description = "")
  public BigDecimal getMarketValueOpenInBaseCurrency() {
    return marketValueOpenInBaseCurrency;
  }

  public void setMarketValueOpenInBaseCurrency(BigDecimal marketValueOpenInBaseCurrency) {
    this.marketValueOpenInBaseCurrency = marketValueOpenInBaseCurrency;
  }

  public NetPositionsMePositionView profitLossCurrencyConversion(BigDecimal profitLossCurrencyConversion) {
    this.profitLossCurrencyConversion = profitLossCurrencyConversion;
    return this;
  }

   /**
   * Get profitLossCurrencyConversion
   * @return profitLossCurrencyConversion
  **/
  @Schema(description = "")
  public BigDecimal getProfitLossCurrencyConversion() {
    return profitLossCurrencyConversion;
  }

  public void setProfitLossCurrencyConversion(BigDecimal profitLossCurrencyConversion) {
    this.profitLossCurrencyConversion = profitLossCurrencyConversion;
  }

  public NetPositionsMePositionView profitLossOnTrade(BigDecimal profitLossOnTrade) {
    this.profitLossOnTrade = profitLossOnTrade;
    return this;
  }

   /**
   * Get profitLossOnTrade
   * @return profitLossOnTrade
  **/
  @Schema(description = "")
  public BigDecimal getProfitLossOnTrade() {
    return profitLossOnTrade;
  }

  public void setProfitLossOnTrade(BigDecimal profitLossOnTrade) {
    this.profitLossOnTrade = profitLossOnTrade;
  }

  public NetPositionsMePositionView profitLossOnTradeInBaseCurrency(BigDecimal profitLossOnTradeInBaseCurrency) {
    this.profitLossOnTradeInBaseCurrency = profitLossOnTradeInBaseCurrency;
    return this;
  }

   /**
   * Get profitLossOnTradeInBaseCurrency
   * @return profitLossOnTradeInBaseCurrency
  **/
  @Schema(description = "")
  public BigDecimal getProfitLossOnTradeInBaseCurrency() {
    return profitLossOnTradeInBaseCurrency;
  }

  public void setProfitLossOnTradeInBaseCurrency(BigDecimal profitLossOnTradeInBaseCurrency) {
    this.profitLossOnTradeInBaseCurrency = profitLossOnTradeInBaseCurrency;
  }

  public NetPositionsMePositionView tradeCostsTotal(BigDecimal tradeCostsTotal) {
    this.tradeCostsTotal = tradeCostsTotal;
    return this;
  }

   /**
   * Get tradeCostsTotal
   * @return tradeCostsTotal
  **/
  @Schema(description = "")
  public BigDecimal getTradeCostsTotal() {
    return tradeCostsTotal;
  }

  public void setTradeCostsTotal(BigDecimal tradeCostsTotal) {
    this.tradeCostsTotal = tradeCostsTotal;
  }

  public NetPositionsMePositionView tradeCostsTotalInBaseCurrency(BigDecimal tradeCostsTotalInBaseCurrency) {
    this.tradeCostsTotalInBaseCurrency = tradeCostsTotalInBaseCurrency;
    return this;
  }

   /**
   * Get tradeCostsTotalInBaseCurrency
   * @return tradeCostsTotalInBaseCurrency
  **/
  @Schema(description = "")
  public BigDecimal getTradeCostsTotalInBaseCurrency() {
    return tradeCostsTotalInBaseCurrency;
  }

  public void setTradeCostsTotalInBaseCurrency(BigDecimal tradeCostsTotalInBaseCurrency) {
    this.tradeCostsTotalInBaseCurrency = tradeCostsTotalInBaseCurrency;
  }

  public NetPositionsMePositionView underlyingCurrentPrice(BigDecimal underlyingCurrentPrice) {
    this.underlyingCurrentPrice = underlyingCurrentPrice;
    return this;
  }

   /**
   * Get underlyingCurrentPrice
   * @return underlyingCurrentPrice
  **/
  @Schema(description = "")
  public BigDecimal getUnderlyingCurrentPrice() {
    return underlyingCurrentPrice;
  }

  public void setUnderlyingCurrentPrice(BigDecimal underlyingCurrentPrice) {
    this.underlyingCurrentPrice = underlyingCurrentPrice;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetPositionsMePositionView netPositionsMePositionView = (NetPositionsMePositionView) o;
    return Objects.equals(this.calculationReliability, netPositionsMePositionView.calculationReliability) &&
        Objects.equals(this.conversionRateCurrent, netPositionsMePositionView.conversionRateCurrent) &&
        Objects.equals(this.conversionRateOpen, netPositionsMePositionView.conversionRateOpen) &&
        Objects.equals(this.currentPrice, netPositionsMePositionView.currentPrice) &&
        Objects.equals(this.currentPriceDelayMinutes, netPositionsMePositionView.currentPriceDelayMinutes) &&
        Objects.equals(this.currentPriceType, netPositionsMePositionView.currentPriceType) &&
        Objects.equals(this.exposure, netPositionsMePositionView.exposure) &&
        Objects.equals(this.exposureCurrency, netPositionsMePositionView.exposureCurrency) &&
        Objects.equals(this.exposureInBaseCurrency, netPositionsMePositionView.exposureInBaseCurrency) &&
        Objects.equals(this.instrumentPriceDayPercentChange, netPositionsMePositionView.instrumentPriceDayPercentChange) &&
        Objects.equals(this.marketState, netPositionsMePositionView.marketState) &&
        Objects.equals(this.marketValue, netPositionsMePositionView.marketValue) &&
        Objects.equals(this.marketValueInBaseCurrency, netPositionsMePositionView.marketValueInBaseCurrency) &&
        Objects.equals(this.marketValueOpen, netPositionsMePositionView.marketValueOpen) &&
        Objects.equals(this.marketValueOpenInBaseCurrency, netPositionsMePositionView.marketValueOpenInBaseCurrency) &&
        Objects.equals(this.profitLossCurrencyConversion, netPositionsMePositionView.profitLossCurrencyConversion) &&
        Objects.equals(this.profitLossOnTrade, netPositionsMePositionView.profitLossOnTrade) &&
        Objects.equals(this.profitLossOnTradeInBaseCurrency, netPositionsMePositionView.profitLossOnTradeInBaseCurrency) &&
        Objects.equals(this.tradeCostsTotal, netPositionsMePositionView.tradeCostsTotal) &&
        Objects.equals(this.tradeCostsTotalInBaseCurrency, netPositionsMePositionView.tradeCostsTotalInBaseCurrency) &&
        Objects.equals(this.underlyingCurrentPrice, netPositionsMePositionView.underlyingCurrentPrice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calculationReliability, conversionRateCurrent, conversionRateOpen, currentPrice, currentPriceDelayMinutes, currentPriceType, exposure, exposureCurrency, exposureInBaseCurrency, instrumentPriceDayPercentChange, marketState, marketValue, marketValueInBaseCurrency, marketValueOpen, marketValueOpenInBaseCurrency, profitLossCurrencyConversion, profitLossOnTrade, profitLossOnTradeInBaseCurrency, tradeCostsTotal, tradeCostsTotalInBaseCurrency, underlyingCurrentPrice);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetPositionsMePositionView {\n");
    
    sb.append("    calculationReliability: ").append(toIndentedString(calculationReliability)).append("\n");
    sb.append("    conversionRateCurrent: ").append(toIndentedString(conversionRateCurrent)).append("\n");
    sb.append("    conversionRateOpen: ").append(toIndentedString(conversionRateOpen)).append("\n");
    sb.append("    currentPrice: ").append(toIndentedString(currentPrice)).append("\n");
    sb.append("    currentPriceDelayMinutes: ").append(toIndentedString(currentPriceDelayMinutes)).append("\n");
    sb.append("    currentPriceType: ").append(toIndentedString(currentPriceType)).append("\n");
    sb.append("    exposure: ").append(toIndentedString(exposure)).append("\n");
    sb.append("    exposureCurrency: ").append(toIndentedString(exposureCurrency)).append("\n");
    sb.append("    exposureInBaseCurrency: ").append(toIndentedString(exposureInBaseCurrency)).append("\n");
    sb.append("    instrumentPriceDayPercentChange: ").append(toIndentedString(instrumentPriceDayPercentChange)).append("\n");
    sb.append("    marketState: ").append(toIndentedString(marketState)).append("\n");
    sb.append("    marketValue: ").append(toIndentedString(marketValue)).append("\n");
    sb.append("    marketValueInBaseCurrency: ").append(toIndentedString(marketValueInBaseCurrency)).append("\n");
    sb.append("    marketValueOpen: ").append(toIndentedString(marketValueOpen)).append("\n");
    sb.append("    marketValueOpenInBaseCurrency: ").append(toIndentedString(marketValueOpenInBaseCurrency)).append("\n");
    sb.append("    profitLossCurrencyConversion: ").append(toIndentedString(profitLossCurrencyConversion)).append("\n");
    sb.append("    profitLossOnTrade: ").append(toIndentedString(profitLossOnTrade)).append("\n");
    sb.append("    profitLossOnTradeInBaseCurrency: ").append(toIndentedString(profitLossOnTradeInBaseCurrency)).append("\n");
    sb.append("    tradeCostsTotal: ").append(toIndentedString(tradeCostsTotal)).append("\n");
    sb.append("    tradeCostsTotalInBaseCurrency: ").append(toIndentedString(tradeCostsTotalInBaseCurrency)).append("\n");
    sb.append("    underlyingCurrentPrice: ").append(toIndentedString(underlyingCurrentPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
