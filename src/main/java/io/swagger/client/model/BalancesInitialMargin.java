/*
 * Saxobank trading API
 * Saxobank trading API
 *
 * OpenAPI spec version: 0.1-oas3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.BalancesCollateralCreditValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * BalancesInitialMargin
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-07-20T19:53:46.685908542Z[GMT]")

public class BalancesInitialMargin {
  @SerializedName("CollateralAvailable")
  private BigDecimal collateralAvailable = null;

  @SerializedName("CollateralCreditValue")
  private BalancesCollateralCreditValue collateralCreditValue = null;

  @SerializedName("MarginAvailable")
  private BigDecimal marginAvailable = null;

  @SerializedName("MarginCollateralNotAvailable")
  private BigDecimal marginCollateralNotAvailable = null;

  @SerializedName("MarginUsedByCurrentPositions")
  private BigDecimal marginUsedByCurrentPositions = null;

  @SerializedName("MarginUtilizationPct")
  private BigDecimal marginUtilizationPct = null;

  @SerializedName("NetEquityForMargin")
  private BigDecimal netEquityForMargin = null;

  @SerializedName("OtherCollateralDeduction")
  private BigDecimal otherCollateralDeduction = null;

  public BalancesInitialMargin collateralAvailable(BigDecimal collateralAvailable) {
    this.collateralAvailable = collateralAvailable;
    return this;
  }

   /**
   * Get collateralAvailable
   * @return collateralAvailable
  **/
  @Schema(description = "")
  public BigDecimal getCollateralAvailable() {
    return collateralAvailable;
  }

  public void setCollateralAvailable(BigDecimal collateralAvailable) {
    this.collateralAvailable = collateralAvailable;
  }

  public BalancesInitialMargin collateralCreditValue(BalancesCollateralCreditValue collateralCreditValue) {
    this.collateralCreditValue = collateralCreditValue;
    return this;
  }

   /**
   * Get collateralCreditValue
   * @return collateralCreditValue
  **/
  @Schema(description = "")
  public BalancesCollateralCreditValue getCollateralCreditValue() {
    return collateralCreditValue;
  }

  public void setCollateralCreditValue(BalancesCollateralCreditValue collateralCreditValue) {
    this.collateralCreditValue = collateralCreditValue;
  }

  public BalancesInitialMargin marginAvailable(BigDecimal marginAvailable) {
    this.marginAvailable = marginAvailable;
    return this;
  }

   /**
   * Get marginAvailable
   * @return marginAvailable
  **/
  @Schema(description = "")
  public BigDecimal getMarginAvailable() {
    return marginAvailable;
  }

  public void setMarginAvailable(BigDecimal marginAvailable) {
    this.marginAvailable = marginAvailable;
  }

  public BalancesInitialMargin marginCollateralNotAvailable(BigDecimal marginCollateralNotAvailable) {
    this.marginCollateralNotAvailable = marginCollateralNotAvailable;
    return this;
  }

   /**
   * Get marginCollateralNotAvailable
   * @return marginCollateralNotAvailable
  **/
  @Schema(description = "")
  public BigDecimal getMarginCollateralNotAvailable() {
    return marginCollateralNotAvailable;
  }

  public void setMarginCollateralNotAvailable(BigDecimal marginCollateralNotAvailable) {
    this.marginCollateralNotAvailable = marginCollateralNotAvailable;
  }

  public BalancesInitialMargin marginUsedByCurrentPositions(BigDecimal marginUsedByCurrentPositions) {
    this.marginUsedByCurrentPositions = marginUsedByCurrentPositions;
    return this;
  }

   /**
   * Get marginUsedByCurrentPositions
   * @return marginUsedByCurrentPositions
  **/
  @Schema(description = "")
  public BigDecimal getMarginUsedByCurrentPositions() {
    return marginUsedByCurrentPositions;
  }

  public void setMarginUsedByCurrentPositions(BigDecimal marginUsedByCurrentPositions) {
    this.marginUsedByCurrentPositions = marginUsedByCurrentPositions;
  }

  public BalancesInitialMargin marginUtilizationPct(BigDecimal marginUtilizationPct) {
    this.marginUtilizationPct = marginUtilizationPct;
    return this;
  }

   /**
   * Get marginUtilizationPct
   * @return marginUtilizationPct
  **/
  @Schema(description = "")
  public BigDecimal getMarginUtilizationPct() {
    return marginUtilizationPct;
  }

  public void setMarginUtilizationPct(BigDecimal marginUtilizationPct) {
    this.marginUtilizationPct = marginUtilizationPct;
  }

  public BalancesInitialMargin netEquityForMargin(BigDecimal netEquityForMargin) {
    this.netEquityForMargin = netEquityForMargin;
    return this;
  }

   /**
   * Get netEquityForMargin
   * @return netEquityForMargin
  **/
  @Schema(description = "")
  public BigDecimal getNetEquityForMargin() {
    return netEquityForMargin;
  }

  public void setNetEquityForMargin(BigDecimal netEquityForMargin) {
    this.netEquityForMargin = netEquityForMargin;
  }

  public BalancesInitialMargin otherCollateralDeduction(BigDecimal otherCollateralDeduction) {
    this.otherCollateralDeduction = otherCollateralDeduction;
    return this;
  }

   /**
   * Get otherCollateralDeduction
   * @return otherCollateralDeduction
  **/
  @Schema(description = "")
  public BigDecimal getOtherCollateralDeduction() {
    return otherCollateralDeduction;
  }

  public void setOtherCollateralDeduction(BigDecimal otherCollateralDeduction) {
    this.otherCollateralDeduction = otherCollateralDeduction;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BalancesInitialMargin balancesInitialMargin = (BalancesInitialMargin) o;
    return Objects.equals(this.collateralAvailable, balancesInitialMargin.collateralAvailable) &&
        Objects.equals(this.collateralCreditValue, balancesInitialMargin.collateralCreditValue) &&
        Objects.equals(this.marginAvailable, balancesInitialMargin.marginAvailable) &&
        Objects.equals(this.marginCollateralNotAvailable, balancesInitialMargin.marginCollateralNotAvailable) &&
        Objects.equals(this.marginUsedByCurrentPositions, balancesInitialMargin.marginUsedByCurrentPositions) &&
        Objects.equals(this.marginUtilizationPct, balancesInitialMargin.marginUtilizationPct) &&
        Objects.equals(this.netEquityForMargin, balancesInitialMargin.netEquityForMargin) &&
        Objects.equals(this.otherCollateralDeduction, balancesInitialMargin.otherCollateralDeduction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collateralAvailable, collateralCreditValue, marginAvailable, marginCollateralNotAvailable, marginUsedByCurrentPositions, marginUtilizationPct, netEquityForMargin, otherCollateralDeduction);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BalancesInitialMargin {\n");
    
    sb.append("    collateralAvailable: ").append(toIndentedString(collateralAvailable)).append("\n");
    sb.append("    collateralCreditValue: ").append(toIndentedString(collateralCreditValue)).append("\n");
    sb.append("    marginAvailable: ").append(toIndentedString(marginAvailable)).append("\n");
    sb.append("    marginCollateralNotAvailable: ").append(toIndentedString(marginCollateralNotAvailable)).append("\n");
    sb.append("    marginUsedByCurrentPositions: ").append(toIndentedString(marginUsedByCurrentPositions)).append("\n");
    sb.append("    marginUtilizationPct: ").append(toIndentedString(marginUtilizationPct)).append("\n");
    sb.append("    netEquityForMargin: ").append(toIndentedString(netEquityForMargin)).append("\n");
    sb.append("    otherCollateralDeduction: ").append(toIndentedString(otherCollateralDeduction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
