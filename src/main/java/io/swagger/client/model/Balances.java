/*
 * Saxobank trading API
 * Saxobank trading API
 *
 * OpenAPI spec version: 0.1-oas3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.BalancesCollateralCreditValue;
import io.swagger.client.model.BalancesInitialMargin;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * Balances
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-07-20T19:53:46.685908542Z[GMT]")

public class Balances {
  @SerializedName("CalculationReliability")
  private String calculationReliability = null;

  @SerializedName("CashAvailableForTrading")
  private BigDecimal cashAvailableForTrading = null;

  @SerializedName("CashBalance")
  private BigDecimal cashBalance = null;

  @SerializedName("CashBlocked")
  private BigDecimal cashBlocked = null;

  @SerializedName("ChangesScheduled")
  private Boolean changesScheduled = null;

  @SerializedName("ClosedPositionsCount")
  private Long closedPositionsCount = null;

  @SerializedName("CollateralAvailable")
  private BigDecimal collateralAvailable = null;

  @SerializedName("CollateralCreditValue")
  private BalancesCollateralCreditValue collateralCreditValue = null;

  @SerializedName("CorporateActionUnrealizedAmounts")
  private BigDecimal corporateActionUnrealizedAmounts = null;

  @SerializedName("CostToClosePositions")
  private BigDecimal costToClosePositions = null;

  @SerializedName("Currency")
  private String currency = null;

  @SerializedName("CurrencyDecimals")
  private Long currencyDecimals = null;

  @SerializedName("InitialMargin")
  private BalancesInitialMargin initialMargin = null;

  @SerializedName("IsPortfolioMarginModelSimple")
  private Boolean isPortfolioMarginModelSimple = null;

  @SerializedName("MarginAndCollateralUtilizationPct")
  private BigDecimal marginAndCollateralUtilizationPct = null;

  @SerializedName("MarginAvailableForTrading")
  private BigDecimal marginAvailableForTrading = null;

  @SerializedName("MarginCollateralNotAvailable")
  private BigDecimal marginCollateralNotAvailable = null;

  @SerializedName("MarginExposureCoveragePct")
  private BigDecimal marginExposureCoveragePct = null;

  @SerializedName("MarginNetExposure")
  private BigDecimal marginNetExposure = null;

  @SerializedName("MarginUsedByCurrentPositions")
  private BigDecimal marginUsedByCurrentPositions = null;

  @SerializedName("MarginUtilizationPct")
  private BigDecimal marginUtilizationPct = null;

  @SerializedName("NetEquityForMargin")
  private BigDecimal netEquityForMargin = null;

  @SerializedName("NetPositionsCount")
  private Long netPositionsCount = null;

  @SerializedName("NonMarginPositionsValue")
  private BigDecimal nonMarginPositionsValue = null;

  @SerializedName("OpenIpoOrdersCount")
  private Long openIpoOrdersCount = null;

  @SerializedName("OpenPositionsCount")
  private Long openPositionsCount = null;

  @SerializedName("OptionPremiumsMarketValue")
  private BigDecimal optionPremiumsMarketValue = null;

  @SerializedName("OrdersCount")
  private Long ordersCount = null;

  @SerializedName("OtherCollateral")
  private BigDecimal otherCollateral = null;

  @SerializedName("SettlementValue")
  private BigDecimal settlementValue = null;

  @SerializedName("SpendingPowerDetail")
  private Object spendingPowerDetail = null;

  @SerializedName("TotalValue")
  private BigDecimal totalValue = null;

  @SerializedName("TransactionsNotBooked")
  private BigDecimal transactionsNotBooked = null;

  @SerializedName("TriggerOrdersCount")
  private Long triggerOrdersCount = null;

  @SerializedName("UnrealizedMarginClosedProfitLoss")
  private BigDecimal unrealizedMarginClosedProfitLoss = null;

  @SerializedName("UnrealizedMarginOpenProfitLoss")
  private BigDecimal unrealizedMarginOpenProfitLoss = null;

  @SerializedName("UnrealizedMarginProfitLoss")
  private BigDecimal unrealizedMarginProfitLoss = null;

  @SerializedName("UnrealizedPositionsValue")
  private BigDecimal unrealizedPositionsValue = null;

  public Balances calculationReliability(String calculationReliability) {
    this.calculationReliability = calculationReliability;
    return this;
  }

   /**
   * Get calculationReliability
   * @return calculationReliability
  **/
  @Schema(description = "")
  public String getCalculationReliability() {
    return calculationReliability;
  }

  public void setCalculationReliability(String calculationReliability) {
    this.calculationReliability = calculationReliability;
  }

  public Balances cashAvailableForTrading(BigDecimal cashAvailableForTrading) {
    this.cashAvailableForTrading = cashAvailableForTrading;
    return this;
  }

   /**
   * Get cashAvailableForTrading
   * @return cashAvailableForTrading
  **/
  @Schema(description = "")
  public BigDecimal getCashAvailableForTrading() {
    return cashAvailableForTrading;
  }

  public void setCashAvailableForTrading(BigDecimal cashAvailableForTrading) {
    this.cashAvailableForTrading = cashAvailableForTrading;
  }

  public Balances cashBalance(BigDecimal cashBalance) {
    this.cashBalance = cashBalance;
    return this;
  }

   /**
   * Get cashBalance
   * @return cashBalance
  **/
  @Schema(description = "")
  public BigDecimal getCashBalance() {
    return cashBalance;
  }

  public void setCashBalance(BigDecimal cashBalance) {
    this.cashBalance = cashBalance;
  }

  public Balances cashBlocked(BigDecimal cashBlocked) {
    this.cashBlocked = cashBlocked;
    return this;
  }

   /**
   * Get cashBlocked
   * @return cashBlocked
  **/
  @Schema(description = "")
  public BigDecimal getCashBlocked() {
    return cashBlocked;
  }

  public void setCashBlocked(BigDecimal cashBlocked) {
    this.cashBlocked = cashBlocked;
  }

  public Balances changesScheduled(Boolean changesScheduled) {
    this.changesScheduled = changesScheduled;
    return this;
  }

   /**
   * Get changesScheduled
   * @return changesScheduled
  **/
  @Schema(description = "")
  public Boolean isChangesScheduled() {
    return changesScheduled;
  }

  public void setChangesScheduled(Boolean changesScheduled) {
    this.changesScheduled = changesScheduled;
  }

  public Balances closedPositionsCount(Long closedPositionsCount) {
    this.closedPositionsCount = closedPositionsCount;
    return this;
  }

   /**
   * Get closedPositionsCount
   * @return closedPositionsCount
  **/
  @Schema(description = "")
  public Long getClosedPositionsCount() {
    return closedPositionsCount;
  }

  public void setClosedPositionsCount(Long closedPositionsCount) {
    this.closedPositionsCount = closedPositionsCount;
  }

  public Balances collateralAvailable(BigDecimal collateralAvailable) {
    this.collateralAvailable = collateralAvailable;
    return this;
  }

   /**
   * Get collateralAvailable
   * @return collateralAvailable
  **/
  @Schema(description = "")
  public BigDecimal getCollateralAvailable() {
    return collateralAvailable;
  }

  public void setCollateralAvailable(BigDecimal collateralAvailable) {
    this.collateralAvailable = collateralAvailable;
  }

  public Balances collateralCreditValue(BalancesCollateralCreditValue collateralCreditValue) {
    this.collateralCreditValue = collateralCreditValue;
    return this;
  }

   /**
   * Get collateralCreditValue
   * @return collateralCreditValue
  **/
  @Schema(description = "")
  public BalancesCollateralCreditValue getCollateralCreditValue() {
    return collateralCreditValue;
  }

  public void setCollateralCreditValue(BalancesCollateralCreditValue collateralCreditValue) {
    this.collateralCreditValue = collateralCreditValue;
  }

  public Balances corporateActionUnrealizedAmounts(BigDecimal corporateActionUnrealizedAmounts) {
    this.corporateActionUnrealizedAmounts = corporateActionUnrealizedAmounts;
    return this;
  }

   /**
   * Get corporateActionUnrealizedAmounts
   * @return corporateActionUnrealizedAmounts
  **/
  @Schema(description = "")
  public BigDecimal getCorporateActionUnrealizedAmounts() {
    return corporateActionUnrealizedAmounts;
  }

  public void setCorporateActionUnrealizedAmounts(BigDecimal corporateActionUnrealizedAmounts) {
    this.corporateActionUnrealizedAmounts = corporateActionUnrealizedAmounts;
  }

  public Balances costToClosePositions(BigDecimal costToClosePositions) {
    this.costToClosePositions = costToClosePositions;
    return this;
  }

   /**
   * Get costToClosePositions
   * @return costToClosePositions
  **/
  @Schema(description = "")
  public BigDecimal getCostToClosePositions() {
    return costToClosePositions;
  }

  public void setCostToClosePositions(BigDecimal costToClosePositions) {
    this.costToClosePositions = costToClosePositions;
  }

  public Balances currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @Schema(description = "")
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public Balances currencyDecimals(Long currencyDecimals) {
    this.currencyDecimals = currencyDecimals;
    return this;
  }

   /**
   * Get currencyDecimals
   * @return currencyDecimals
  **/
  @Schema(description = "")
  public Long getCurrencyDecimals() {
    return currencyDecimals;
  }

  public void setCurrencyDecimals(Long currencyDecimals) {
    this.currencyDecimals = currencyDecimals;
  }

  public Balances initialMargin(BalancesInitialMargin initialMargin) {
    this.initialMargin = initialMargin;
    return this;
  }

   /**
   * Get initialMargin
   * @return initialMargin
  **/
  @Schema(description = "")
  public BalancesInitialMargin getInitialMargin() {
    return initialMargin;
  }

  public void setInitialMargin(BalancesInitialMargin initialMargin) {
    this.initialMargin = initialMargin;
  }

  public Balances isPortfolioMarginModelSimple(Boolean isPortfolioMarginModelSimple) {
    this.isPortfolioMarginModelSimple = isPortfolioMarginModelSimple;
    return this;
  }

   /**
   * Get isPortfolioMarginModelSimple
   * @return isPortfolioMarginModelSimple
  **/
  @Schema(description = "")
  public Boolean isIsPortfolioMarginModelSimple() {
    return isPortfolioMarginModelSimple;
  }

  public void setIsPortfolioMarginModelSimple(Boolean isPortfolioMarginModelSimple) {
    this.isPortfolioMarginModelSimple = isPortfolioMarginModelSimple;
  }

  public Balances marginAndCollateralUtilizationPct(BigDecimal marginAndCollateralUtilizationPct) {
    this.marginAndCollateralUtilizationPct = marginAndCollateralUtilizationPct;
    return this;
  }

   /**
   * Get marginAndCollateralUtilizationPct
   * @return marginAndCollateralUtilizationPct
  **/
  @Schema(description = "")
  public BigDecimal getMarginAndCollateralUtilizationPct() {
    return marginAndCollateralUtilizationPct;
  }

  public void setMarginAndCollateralUtilizationPct(BigDecimal marginAndCollateralUtilizationPct) {
    this.marginAndCollateralUtilizationPct = marginAndCollateralUtilizationPct;
  }

  public Balances marginAvailableForTrading(BigDecimal marginAvailableForTrading) {
    this.marginAvailableForTrading = marginAvailableForTrading;
    return this;
  }

   /**
   * Get marginAvailableForTrading
   * @return marginAvailableForTrading
  **/
  @Schema(description = "")
  public BigDecimal getMarginAvailableForTrading() {
    return marginAvailableForTrading;
  }

  public void setMarginAvailableForTrading(BigDecimal marginAvailableForTrading) {
    this.marginAvailableForTrading = marginAvailableForTrading;
  }

  public Balances marginCollateralNotAvailable(BigDecimal marginCollateralNotAvailable) {
    this.marginCollateralNotAvailable = marginCollateralNotAvailable;
    return this;
  }

   /**
   * Get marginCollateralNotAvailable
   * @return marginCollateralNotAvailable
  **/
  @Schema(description = "")
  public BigDecimal getMarginCollateralNotAvailable() {
    return marginCollateralNotAvailable;
  }

  public void setMarginCollateralNotAvailable(BigDecimal marginCollateralNotAvailable) {
    this.marginCollateralNotAvailable = marginCollateralNotAvailable;
  }

  public Balances marginExposureCoveragePct(BigDecimal marginExposureCoveragePct) {
    this.marginExposureCoveragePct = marginExposureCoveragePct;
    return this;
  }

   /**
   * Get marginExposureCoveragePct
   * @return marginExposureCoveragePct
  **/
  @Schema(description = "")
  public BigDecimal getMarginExposureCoveragePct() {
    return marginExposureCoveragePct;
  }

  public void setMarginExposureCoveragePct(BigDecimal marginExposureCoveragePct) {
    this.marginExposureCoveragePct = marginExposureCoveragePct;
  }

  public Balances marginNetExposure(BigDecimal marginNetExposure) {
    this.marginNetExposure = marginNetExposure;
    return this;
  }

   /**
   * Get marginNetExposure
   * @return marginNetExposure
  **/
  @Schema(description = "")
  public BigDecimal getMarginNetExposure() {
    return marginNetExposure;
  }

  public void setMarginNetExposure(BigDecimal marginNetExposure) {
    this.marginNetExposure = marginNetExposure;
  }

  public Balances marginUsedByCurrentPositions(BigDecimal marginUsedByCurrentPositions) {
    this.marginUsedByCurrentPositions = marginUsedByCurrentPositions;
    return this;
  }

   /**
   * Get marginUsedByCurrentPositions
   * @return marginUsedByCurrentPositions
  **/
  @Schema(description = "")
  public BigDecimal getMarginUsedByCurrentPositions() {
    return marginUsedByCurrentPositions;
  }

  public void setMarginUsedByCurrentPositions(BigDecimal marginUsedByCurrentPositions) {
    this.marginUsedByCurrentPositions = marginUsedByCurrentPositions;
  }

  public Balances marginUtilizationPct(BigDecimal marginUtilizationPct) {
    this.marginUtilizationPct = marginUtilizationPct;
    return this;
  }

   /**
   * Get marginUtilizationPct
   * @return marginUtilizationPct
  **/
  @Schema(description = "")
  public BigDecimal getMarginUtilizationPct() {
    return marginUtilizationPct;
  }

  public void setMarginUtilizationPct(BigDecimal marginUtilizationPct) {
    this.marginUtilizationPct = marginUtilizationPct;
  }

  public Balances netEquityForMargin(BigDecimal netEquityForMargin) {
    this.netEquityForMargin = netEquityForMargin;
    return this;
  }

   /**
   * Get netEquityForMargin
   * @return netEquityForMargin
  **/
  @Schema(description = "")
  public BigDecimal getNetEquityForMargin() {
    return netEquityForMargin;
  }

  public void setNetEquityForMargin(BigDecimal netEquityForMargin) {
    this.netEquityForMargin = netEquityForMargin;
  }

  public Balances netPositionsCount(Long netPositionsCount) {
    this.netPositionsCount = netPositionsCount;
    return this;
  }

   /**
   * Get netPositionsCount
   * @return netPositionsCount
  **/
  @Schema(description = "")
  public Long getNetPositionsCount() {
    return netPositionsCount;
  }

  public void setNetPositionsCount(Long netPositionsCount) {
    this.netPositionsCount = netPositionsCount;
  }

  public Balances nonMarginPositionsValue(BigDecimal nonMarginPositionsValue) {
    this.nonMarginPositionsValue = nonMarginPositionsValue;
    return this;
  }

   /**
   * Get nonMarginPositionsValue
   * @return nonMarginPositionsValue
  **/
  @Schema(description = "")
  public BigDecimal getNonMarginPositionsValue() {
    return nonMarginPositionsValue;
  }

  public void setNonMarginPositionsValue(BigDecimal nonMarginPositionsValue) {
    this.nonMarginPositionsValue = nonMarginPositionsValue;
  }

  public Balances openIpoOrdersCount(Long openIpoOrdersCount) {
    this.openIpoOrdersCount = openIpoOrdersCount;
    return this;
  }

   /**
   * Get openIpoOrdersCount
   * @return openIpoOrdersCount
  **/
  @Schema(description = "")
  public Long getOpenIpoOrdersCount() {
    return openIpoOrdersCount;
  }

  public void setOpenIpoOrdersCount(Long openIpoOrdersCount) {
    this.openIpoOrdersCount = openIpoOrdersCount;
  }

  public Balances openPositionsCount(Long openPositionsCount) {
    this.openPositionsCount = openPositionsCount;
    return this;
  }

   /**
   * Get openPositionsCount
   * @return openPositionsCount
  **/
  @Schema(description = "")
  public Long getOpenPositionsCount() {
    return openPositionsCount;
  }

  public void setOpenPositionsCount(Long openPositionsCount) {
    this.openPositionsCount = openPositionsCount;
  }

  public Balances optionPremiumsMarketValue(BigDecimal optionPremiumsMarketValue) {
    this.optionPremiumsMarketValue = optionPremiumsMarketValue;
    return this;
  }

   /**
   * Get optionPremiumsMarketValue
   * @return optionPremiumsMarketValue
  **/
  @Schema(description = "")
  public BigDecimal getOptionPremiumsMarketValue() {
    return optionPremiumsMarketValue;
  }

  public void setOptionPremiumsMarketValue(BigDecimal optionPremiumsMarketValue) {
    this.optionPremiumsMarketValue = optionPremiumsMarketValue;
  }

  public Balances ordersCount(Long ordersCount) {
    this.ordersCount = ordersCount;
    return this;
  }

   /**
   * Get ordersCount
   * @return ordersCount
  **/
  @Schema(description = "")
  public Long getOrdersCount() {
    return ordersCount;
  }

  public void setOrdersCount(Long ordersCount) {
    this.ordersCount = ordersCount;
  }

  public Balances otherCollateral(BigDecimal otherCollateral) {
    this.otherCollateral = otherCollateral;
    return this;
  }

   /**
   * Get otherCollateral
   * @return otherCollateral
  **/
  @Schema(description = "")
  public BigDecimal getOtherCollateral() {
    return otherCollateral;
  }

  public void setOtherCollateral(BigDecimal otherCollateral) {
    this.otherCollateral = otherCollateral;
  }

  public Balances settlementValue(BigDecimal settlementValue) {
    this.settlementValue = settlementValue;
    return this;
  }

   /**
   * Get settlementValue
   * @return settlementValue
  **/
  @Schema(description = "")
  public BigDecimal getSettlementValue() {
    return settlementValue;
  }

  public void setSettlementValue(BigDecimal settlementValue) {
    this.settlementValue = settlementValue;
  }

  public Balances spendingPowerDetail(Object spendingPowerDetail) {
    this.spendingPowerDetail = spendingPowerDetail;
    return this;
  }

   /**
   * Get spendingPowerDetail
   * @return spendingPowerDetail
  **/
  @Schema(description = "")
  public Object getSpendingPowerDetail() {
    return spendingPowerDetail;
  }

  public void setSpendingPowerDetail(Object spendingPowerDetail) {
    this.spendingPowerDetail = spendingPowerDetail;
  }

  public Balances totalValue(BigDecimal totalValue) {
    this.totalValue = totalValue;
    return this;
  }

   /**
   * Get totalValue
   * @return totalValue
  **/
  @Schema(description = "")
  public BigDecimal getTotalValue() {
    return totalValue;
  }

  public void setTotalValue(BigDecimal totalValue) {
    this.totalValue = totalValue;
  }

  public Balances transactionsNotBooked(BigDecimal transactionsNotBooked) {
    this.transactionsNotBooked = transactionsNotBooked;
    return this;
  }

   /**
   * Get transactionsNotBooked
   * @return transactionsNotBooked
  **/
  @Schema(description = "")
  public BigDecimal getTransactionsNotBooked() {
    return transactionsNotBooked;
  }

  public void setTransactionsNotBooked(BigDecimal transactionsNotBooked) {
    this.transactionsNotBooked = transactionsNotBooked;
  }

  public Balances triggerOrdersCount(Long triggerOrdersCount) {
    this.triggerOrdersCount = triggerOrdersCount;
    return this;
  }

   /**
   * Get triggerOrdersCount
   * @return triggerOrdersCount
  **/
  @Schema(description = "")
  public Long getTriggerOrdersCount() {
    return triggerOrdersCount;
  }

  public void setTriggerOrdersCount(Long triggerOrdersCount) {
    this.triggerOrdersCount = triggerOrdersCount;
  }

  public Balances unrealizedMarginClosedProfitLoss(BigDecimal unrealizedMarginClosedProfitLoss) {
    this.unrealizedMarginClosedProfitLoss = unrealizedMarginClosedProfitLoss;
    return this;
  }

   /**
   * Get unrealizedMarginClosedProfitLoss
   * @return unrealizedMarginClosedProfitLoss
  **/
  @Schema(description = "")
  public BigDecimal getUnrealizedMarginClosedProfitLoss() {
    return unrealizedMarginClosedProfitLoss;
  }

  public void setUnrealizedMarginClosedProfitLoss(BigDecimal unrealizedMarginClosedProfitLoss) {
    this.unrealizedMarginClosedProfitLoss = unrealizedMarginClosedProfitLoss;
  }

  public Balances unrealizedMarginOpenProfitLoss(BigDecimal unrealizedMarginOpenProfitLoss) {
    this.unrealizedMarginOpenProfitLoss = unrealizedMarginOpenProfitLoss;
    return this;
  }

   /**
   * Get unrealizedMarginOpenProfitLoss
   * @return unrealizedMarginOpenProfitLoss
  **/
  @Schema(description = "")
  public BigDecimal getUnrealizedMarginOpenProfitLoss() {
    return unrealizedMarginOpenProfitLoss;
  }

  public void setUnrealizedMarginOpenProfitLoss(BigDecimal unrealizedMarginOpenProfitLoss) {
    this.unrealizedMarginOpenProfitLoss = unrealizedMarginOpenProfitLoss;
  }

  public Balances unrealizedMarginProfitLoss(BigDecimal unrealizedMarginProfitLoss) {
    this.unrealizedMarginProfitLoss = unrealizedMarginProfitLoss;
    return this;
  }

   /**
   * Get unrealizedMarginProfitLoss
   * @return unrealizedMarginProfitLoss
  **/
  @Schema(description = "")
  public BigDecimal getUnrealizedMarginProfitLoss() {
    return unrealizedMarginProfitLoss;
  }

  public void setUnrealizedMarginProfitLoss(BigDecimal unrealizedMarginProfitLoss) {
    this.unrealizedMarginProfitLoss = unrealizedMarginProfitLoss;
  }

  public Balances unrealizedPositionsValue(BigDecimal unrealizedPositionsValue) {
    this.unrealizedPositionsValue = unrealizedPositionsValue;
    return this;
  }

   /**
   * Get unrealizedPositionsValue
   * @return unrealizedPositionsValue
  **/
  @Schema(description = "")
  public BigDecimal getUnrealizedPositionsValue() {
    return unrealizedPositionsValue;
  }

  public void setUnrealizedPositionsValue(BigDecimal unrealizedPositionsValue) {
    this.unrealizedPositionsValue = unrealizedPositionsValue;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Balances balances = (Balances) o;
    return Objects.equals(this.calculationReliability, balances.calculationReliability) &&
        Objects.equals(this.cashAvailableForTrading, balances.cashAvailableForTrading) &&
        Objects.equals(this.cashBalance, balances.cashBalance) &&
        Objects.equals(this.cashBlocked, balances.cashBlocked) &&
        Objects.equals(this.changesScheduled, balances.changesScheduled) &&
        Objects.equals(this.closedPositionsCount, balances.closedPositionsCount) &&
        Objects.equals(this.collateralAvailable, balances.collateralAvailable) &&
        Objects.equals(this.collateralCreditValue, balances.collateralCreditValue) &&
        Objects.equals(this.corporateActionUnrealizedAmounts, balances.corporateActionUnrealizedAmounts) &&
        Objects.equals(this.costToClosePositions, balances.costToClosePositions) &&
        Objects.equals(this.currency, balances.currency) &&
        Objects.equals(this.currencyDecimals, balances.currencyDecimals) &&
        Objects.equals(this.initialMargin, balances.initialMargin) &&
        Objects.equals(this.isPortfolioMarginModelSimple, balances.isPortfolioMarginModelSimple) &&
        Objects.equals(this.marginAndCollateralUtilizationPct, balances.marginAndCollateralUtilizationPct) &&
        Objects.equals(this.marginAvailableForTrading, balances.marginAvailableForTrading) &&
        Objects.equals(this.marginCollateralNotAvailable, balances.marginCollateralNotAvailable) &&
        Objects.equals(this.marginExposureCoveragePct, balances.marginExposureCoveragePct) &&
        Objects.equals(this.marginNetExposure, balances.marginNetExposure) &&
        Objects.equals(this.marginUsedByCurrentPositions, balances.marginUsedByCurrentPositions) &&
        Objects.equals(this.marginUtilizationPct, balances.marginUtilizationPct) &&
        Objects.equals(this.netEquityForMargin, balances.netEquityForMargin) &&
        Objects.equals(this.netPositionsCount, balances.netPositionsCount) &&
        Objects.equals(this.nonMarginPositionsValue, balances.nonMarginPositionsValue) &&
        Objects.equals(this.openIpoOrdersCount, balances.openIpoOrdersCount) &&
        Objects.equals(this.openPositionsCount, balances.openPositionsCount) &&
        Objects.equals(this.optionPremiumsMarketValue, balances.optionPremiumsMarketValue) &&
        Objects.equals(this.ordersCount, balances.ordersCount) &&
        Objects.equals(this.otherCollateral, balances.otherCollateral) &&
        Objects.equals(this.settlementValue, balances.settlementValue) &&
        Objects.equals(this.spendingPowerDetail, balances.spendingPowerDetail) &&
        Objects.equals(this.totalValue, balances.totalValue) &&
        Objects.equals(this.transactionsNotBooked, balances.transactionsNotBooked) &&
        Objects.equals(this.triggerOrdersCount, balances.triggerOrdersCount) &&
        Objects.equals(this.unrealizedMarginClosedProfitLoss, balances.unrealizedMarginClosedProfitLoss) &&
        Objects.equals(this.unrealizedMarginOpenProfitLoss, balances.unrealizedMarginOpenProfitLoss) &&
        Objects.equals(this.unrealizedMarginProfitLoss, balances.unrealizedMarginProfitLoss) &&
        Objects.equals(this.unrealizedPositionsValue, balances.unrealizedPositionsValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calculationReliability, cashAvailableForTrading, cashBalance, cashBlocked, changesScheduled, closedPositionsCount, collateralAvailable, collateralCreditValue, corporateActionUnrealizedAmounts, costToClosePositions, currency, currencyDecimals, initialMargin, isPortfolioMarginModelSimple, marginAndCollateralUtilizationPct, marginAvailableForTrading, marginCollateralNotAvailable, marginExposureCoveragePct, marginNetExposure, marginUsedByCurrentPositions, marginUtilizationPct, netEquityForMargin, netPositionsCount, nonMarginPositionsValue, openIpoOrdersCount, openPositionsCount, optionPremiumsMarketValue, ordersCount, otherCollateral, settlementValue, spendingPowerDetail, totalValue, transactionsNotBooked, triggerOrdersCount, unrealizedMarginClosedProfitLoss, unrealizedMarginOpenProfitLoss, unrealizedMarginProfitLoss, unrealizedPositionsValue);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Balances {\n");
    
    sb.append("    calculationReliability: ").append(toIndentedString(calculationReliability)).append("\n");
    sb.append("    cashAvailableForTrading: ").append(toIndentedString(cashAvailableForTrading)).append("\n");
    sb.append("    cashBalance: ").append(toIndentedString(cashBalance)).append("\n");
    sb.append("    cashBlocked: ").append(toIndentedString(cashBlocked)).append("\n");
    sb.append("    changesScheduled: ").append(toIndentedString(changesScheduled)).append("\n");
    sb.append("    closedPositionsCount: ").append(toIndentedString(closedPositionsCount)).append("\n");
    sb.append("    collateralAvailable: ").append(toIndentedString(collateralAvailable)).append("\n");
    sb.append("    collateralCreditValue: ").append(toIndentedString(collateralCreditValue)).append("\n");
    sb.append("    corporateActionUnrealizedAmounts: ").append(toIndentedString(corporateActionUnrealizedAmounts)).append("\n");
    sb.append("    costToClosePositions: ").append(toIndentedString(costToClosePositions)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    currencyDecimals: ").append(toIndentedString(currencyDecimals)).append("\n");
    sb.append("    initialMargin: ").append(toIndentedString(initialMargin)).append("\n");
    sb.append("    isPortfolioMarginModelSimple: ").append(toIndentedString(isPortfolioMarginModelSimple)).append("\n");
    sb.append("    marginAndCollateralUtilizationPct: ").append(toIndentedString(marginAndCollateralUtilizationPct)).append("\n");
    sb.append("    marginAvailableForTrading: ").append(toIndentedString(marginAvailableForTrading)).append("\n");
    sb.append("    marginCollateralNotAvailable: ").append(toIndentedString(marginCollateralNotAvailable)).append("\n");
    sb.append("    marginExposureCoveragePct: ").append(toIndentedString(marginExposureCoveragePct)).append("\n");
    sb.append("    marginNetExposure: ").append(toIndentedString(marginNetExposure)).append("\n");
    sb.append("    marginUsedByCurrentPositions: ").append(toIndentedString(marginUsedByCurrentPositions)).append("\n");
    sb.append("    marginUtilizationPct: ").append(toIndentedString(marginUtilizationPct)).append("\n");
    sb.append("    netEquityForMargin: ").append(toIndentedString(netEquityForMargin)).append("\n");
    sb.append("    netPositionsCount: ").append(toIndentedString(netPositionsCount)).append("\n");
    sb.append("    nonMarginPositionsValue: ").append(toIndentedString(nonMarginPositionsValue)).append("\n");
    sb.append("    openIpoOrdersCount: ").append(toIndentedString(openIpoOrdersCount)).append("\n");
    sb.append("    openPositionsCount: ").append(toIndentedString(openPositionsCount)).append("\n");
    sb.append("    optionPremiumsMarketValue: ").append(toIndentedString(optionPremiumsMarketValue)).append("\n");
    sb.append("    ordersCount: ").append(toIndentedString(ordersCount)).append("\n");
    sb.append("    otherCollateral: ").append(toIndentedString(otherCollateral)).append("\n");
    sb.append("    settlementValue: ").append(toIndentedString(settlementValue)).append("\n");
    sb.append("    spendingPowerDetail: ").append(toIndentedString(spendingPowerDetail)).append("\n");
    sb.append("    totalValue: ").append(toIndentedString(totalValue)).append("\n");
    sb.append("    transactionsNotBooked: ").append(toIndentedString(transactionsNotBooked)).append("\n");
    sb.append("    triggerOrdersCount: ").append(toIndentedString(triggerOrdersCount)).append("\n");
    sb.append("    unrealizedMarginClosedProfitLoss: ").append(toIndentedString(unrealizedMarginClosedProfitLoss)).append("\n");
    sb.append("    unrealizedMarginOpenProfitLoss: ").append(toIndentedString(unrealizedMarginOpenProfitLoss)).append("\n");
    sb.append("    unrealizedMarginProfitLoss: ").append(toIndentedString(unrealizedMarginProfitLoss)).append("\n");
    sb.append("    unrealizedPositionsValue: ").append(toIndentedString(unrealizedPositionsValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
