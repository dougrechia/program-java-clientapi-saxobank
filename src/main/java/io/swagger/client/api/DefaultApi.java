/*
 * Saxobank trading API
 * Saxobank trading API
 *
 * OpenAPI spec version: 0.1-oas3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AccountsMe;
import io.swagger.client.model.Balances;
import io.swagger.client.model.BalancesMe;
import java.math.BigDecimal;
import io.swagger.client.model.ClientsMe;
import io.swagger.client.model.InfoPrice;
import io.swagger.client.model.InstrumentDetail;
import io.swagger.client.model.Instruments;
import io.swagger.client.model.InstrumentsDetails;
import io.swagger.client.model.NetPositionsMe;
import io.swagger.client.model.OrderActivities;
import io.swagger.client.model.OrderCancel;
import io.swagger.client.model.OrderPatchResponse;
import io.swagger.client.model.OrderQuery;
import io.swagger.client.model.OrderResponse;
import io.swagger.client.model.OrdersCancel;
import io.swagger.client.model.Positions;
import io.swagger.client.model.UsersMe;
import io.swagger.client.model.V2OrdersBody;
import io.swagger.client.model.V2OrdersBody1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for openapiCsV1AuditOrderactivitiesGet
     * @param $skiptoken Id token of entity to start taking elements from. (optional)
     * @param $top Optional number of elements to retrieve. (optional)
     * @param accountKey If specified will only return entries pertaining to specified Account. (optional)
     * @param clientKey If specified will only return entries pertaining to specified client and its sub clients depending upon includeSubAccounts. (optional)
     * @param correlationKey If specified, will only return entries with the specified CorrelationKey (optional)
     * @param entryType Optional. Defaults to All- Return all entries pertaining to any order. Last- Only return the latest state of an order ignoring ToDateTime (if any). See https://www.developer.saxo/openapi/referencedocs/cs/v1/audit-orderactivities/getorderstatesasync/88396c9accc21e373925b5cd2ce134dd/orderactivityfieldgroup/bf3c014d6f25279ef6c411669ef88cec (optional)
     * @param fieldGroups FieldGroups - DisplayAndFormat. See https://www.developer.saxo/openapi/referencedocs/cs/v1/audit-orderactivities/getorderstatesasync/88396c9accc21e373925b5cd2ce134dd/orderactivityfieldgroup/bf3c014d6f25279ef6c411669ef88cec (optional)
     * @param fromDateTime (UTC) Only include entries, with a ActivityDateTime greater than or equal to FromDateTime (optional)
     * @param includeSubAccounts IncludeSubAccounts- If specified true will return entries for all clients under specified ClientId in a hierarchy. (optional)
     * @param orderId Will only return entries pertaining to specified OrderId (optional)
     * @param status If specified will only return entries with the specified OrderStatus. See https://www.developer.saxo/openapi/referencedocs/cs/v1/audit-orderactivities/getorderstatesasync/88396c9accc21e373925b5cd2ce134dd/orderlogstatus/37923e81ea74e6f13b5b8fce7abac894 (optional)
     * @param toDateTime (UTC) Only include entries, with a ActivityDateTime less than or equal to ToDateTime. Cannot be used with EntryType&#x3D;\&quot;Last\&quot; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call openapiCsV1AuditOrderactivitiesGetCall(String $skiptoken, Long $top, String accountKey, String clientKey, String correlationKey, String entryType, String fieldGroups, String fromDateTime, Boolean includeSubAccounts, String orderId, String status, String toDateTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/openapi/cs/v1/audit/orderactivities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if ($skiptoken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$skiptoken", $skiptoken));
        if ($top != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$top", $top));
        if (accountKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountKey", accountKey));
        if (clientKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ClientKey", clientKey));
        if (correlationKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("CorrelationKey", correlationKey));
        if (entryType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("EntryType", entryType));
        if (fieldGroups != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("FieldGroups", fieldGroups));
        if (fromDateTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("FromDateTime", fromDateTime));
        if (includeSubAccounts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("IncludeSubAccounts", includeSubAccounts));
        if (orderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("OrderId", orderId));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Status", status));
        if (toDateTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ToDateTime", toDateTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call openapiCsV1AuditOrderactivitiesGetValidateBeforeCall(String $skiptoken, Long $top, String accountKey, String clientKey, String correlationKey, String entryType, String fieldGroups, String fromDateTime, Boolean includeSubAccounts, String orderId, String status, String toDateTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = openapiCsV1AuditOrderactivitiesGetCall($skiptoken, $top, accountKey, clientKey, correlationKey, entryType, fieldGroups, fromDateTime, includeSubAccounts, orderId, status, toDateTime, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Query Order activities history
     * @param $skiptoken Id token of entity to start taking elements from. (optional)
     * @param $top Optional number of elements to retrieve. (optional)
     * @param accountKey If specified will only return entries pertaining to specified Account. (optional)
     * @param clientKey If specified will only return entries pertaining to specified client and its sub clients depending upon includeSubAccounts. (optional)
     * @param correlationKey If specified, will only return entries with the specified CorrelationKey (optional)
     * @param entryType Optional. Defaults to All- Return all entries pertaining to any order. Last- Only return the latest state of an order ignoring ToDateTime (if any). See https://www.developer.saxo/openapi/referencedocs/cs/v1/audit-orderactivities/getorderstatesasync/88396c9accc21e373925b5cd2ce134dd/orderactivityfieldgroup/bf3c014d6f25279ef6c411669ef88cec (optional)
     * @param fieldGroups FieldGroups - DisplayAndFormat. See https://www.developer.saxo/openapi/referencedocs/cs/v1/audit-orderactivities/getorderstatesasync/88396c9accc21e373925b5cd2ce134dd/orderactivityfieldgroup/bf3c014d6f25279ef6c411669ef88cec (optional)
     * @param fromDateTime (UTC) Only include entries, with a ActivityDateTime greater than or equal to FromDateTime (optional)
     * @param includeSubAccounts IncludeSubAccounts- If specified true will return entries for all clients under specified ClientId in a hierarchy. (optional)
     * @param orderId Will only return entries pertaining to specified OrderId (optional)
     * @param status If specified will only return entries with the specified OrderStatus. See https://www.developer.saxo/openapi/referencedocs/cs/v1/audit-orderactivities/getorderstatesasync/88396c9accc21e373925b5cd2ce134dd/orderlogstatus/37923e81ea74e6f13b5b8fce7abac894 (optional)
     * @param toDateTime (UTC) Only include entries, with a ActivityDateTime less than or equal to ToDateTime. Cannot be used with EntryType&#x3D;\&quot;Last\&quot; (optional)
     * @return OrderActivities
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderActivities openapiCsV1AuditOrderactivitiesGet(String $skiptoken, Long $top, String accountKey, String clientKey, String correlationKey, String entryType, String fieldGroups, String fromDateTime, Boolean includeSubAccounts, String orderId, String status, String toDateTime) throws ApiException {
        ApiResponse<OrderActivities> resp = openapiCsV1AuditOrderactivitiesGetWithHttpInfo($skiptoken, $top, accountKey, clientKey, correlationKey, entryType, fieldGroups, fromDateTime, includeSubAccounts, orderId, status, toDateTime);
        return resp.getData();
    }

    /**
     * 
     * Query Order activities history
     * @param $skiptoken Id token of entity to start taking elements from. (optional)
     * @param $top Optional number of elements to retrieve. (optional)
     * @param accountKey If specified will only return entries pertaining to specified Account. (optional)
     * @param clientKey If specified will only return entries pertaining to specified client and its sub clients depending upon includeSubAccounts. (optional)
     * @param correlationKey If specified, will only return entries with the specified CorrelationKey (optional)
     * @param entryType Optional. Defaults to All- Return all entries pertaining to any order. Last- Only return the latest state of an order ignoring ToDateTime (if any). See https://www.developer.saxo/openapi/referencedocs/cs/v1/audit-orderactivities/getorderstatesasync/88396c9accc21e373925b5cd2ce134dd/orderactivityfieldgroup/bf3c014d6f25279ef6c411669ef88cec (optional)
     * @param fieldGroups FieldGroups - DisplayAndFormat. See https://www.developer.saxo/openapi/referencedocs/cs/v1/audit-orderactivities/getorderstatesasync/88396c9accc21e373925b5cd2ce134dd/orderactivityfieldgroup/bf3c014d6f25279ef6c411669ef88cec (optional)
     * @param fromDateTime (UTC) Only include entries, with a ActivityDateTime greater than or equal to FromDateTime (optional)
     * @param includeSubAccounts IncludeSubAccounts- If specified true will return entries for all clients under specified ClientId in a hierarchy. (optional)
     * @param orderId Will only return entries pertaining to specified OrderId (optional)
     * @param status If specified will only return entries with the specified OrderStatus. See https://www.developer.saxo/openapi/referencedocs/cs/v1/audit-orderactivities/getorderstatesasync/88396c9accc21e373925b5cd2ce134dd/orderlogstatus/37923e81ea74e6f13b5b8fce7abac894 (optional)
     * @param toDateTime (UTC) Only include entries, with a ActivityDateTime less than or equal to ToDateTime. Cannot be used with EntryType&#x3D;\&quot;Last\&quot; (optional)
     * @return ApiResponse&lt;OrderActivities&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderActivities> openapiCsV1AuditOrderactivitiesGetWithHttpInfo(String $skiptoken, Long $top, String accountKey, String clientKey, String correlationKey, String entryType, String fieldGroups, String fromDateTime, Boolean includeSubAccounts, String orderId, String status, String toDateTime) throws ApiException {
        com.squareup.okhttp.Call call = openapiCsV1AuditOrderactivitiesGetValidateBeforeCall($skiptoken, $top, accountKey, clientKey, correlationKey, entryType, fieldGroups, fromDateTime, includeSubAccounts, orderId, status, toDateTime, null, null);
        Type localVarReturnType = new TypeToken<OrderActivities>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Query Order activities history
     * @param $skiptoken Id token of entity to start taking elements from. (optional)
     * @param $top Optional number of elements to retrieve. (optional)
     * @param accountKey If specified will only return entries pertaining to specified Account. (optional)
     * @param clientKey If specified will only return entries pertaining to specified client and its sub clients depending upon includeSubAccounts. (optional)
     * @param correlationKey If specified, will only return entries with the specified CorrelationKey (optional)
     * @param entryType Optional. Defaults to All- Return all entries pertaining to any order. Last- Only return the latest state of an order ignoring ToDateTime (if any). See https://www.developer.saxo/openapi/referencedocs/cs/v1/audit-orderactivities/getorderstatesasync/88396c9accc21e373925b5cd2ce134dd/orderactivityfieldgroup/bf3c014d6f25279ef6c411669ef88cec (optional)
     * @param fieldGroups FieldGroups - DisplayAndFormat. See https://www.developer.saxo/openapi/referencedocs/cs/v1/audit-orderactivities/getorderstatesasync/88396c9accc21e373925b5cd2ce134dd/orderactivityfieldgroup/bf3c014d6f25279ef6c411669ef88cec (optional)
     * @param fromDateTime (UTC) Only include entries, with a ActivityDateTime greater than or equal to FromDateTime (optional)
     * @param includeSubAccounts IncludeSubAccounts- If specified true will return entries for all clients under specified ClientId in a hierarchy. (optional)
     * @param orderId Will only return entries pertaining to specified OrderId (optional)
     * @param status If specified will only return entries with the specified OrderStatus. See https://www.developer.saxo/openapi/referencedocs/cs/v1/audit-orderactivities/getorderstatesasync/88396c9accc21e373925b5cd2ce134dd/orderlogstatus/37923e81ea74e6f13b5b8fce7abac894 (optional)
     * @param toDateTime (UTC) Only include entries, with a ActivityDateTime less than or equal to ToDateTime. Cannot be used with EntryType&#x3D;\&quot;Last\&quot; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call openapiCsV1AuditOrderactivitiesGetAsync(String $skiptoken, Long $top, String accountKey, String clientKey, String correlationKey, String entryType, String fieldGroups, String fromDateTime, Boolean includeSubAccounts, String orderId, String status, String toDateTime, final ApiCallback<OrderActivities> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = openapiCsV1AuditOrderactivitiesGetValidateBeforeCall($skiptoken, $top, accountKey, clientKey, correlationKey, entryType, fieldGroups, fromDateTime, includeSubAccounts, orderId, status, toDateTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderActivities>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for openapiPortV1AccountsMeGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call openapiPortV1AccountsMeGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/openapi/port/v1/accounts/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call openapiPortV1AccountsMeGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = openapiPortV1AccountsMeGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @return AccountsMe
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountsMe openapiPortV1AccountsMeGet() throws ApiException {
        ApiResponse<AccountsMe> resp = openapiPortV1AccountsMeGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;AccountsMe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountsMe> openapiPortV1AccountsMeGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = openapiPortV1AccountsMeGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<AccountsMe>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call openapiPortV1AccountsMeGetAsync(final ApiCallback<AccountsMe> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = openapiPortV1AccountsMeGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountsMe>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for openapiPortV1BalancesGet
     * @param accountKey  (optional)
     * @param clientKey  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call openapiPortV1BalancesGetCall(String accountKey, String clientKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/openapi/port/v1/balances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountKey", accountKey));
        if (clientKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ClientKey", clientKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call openapiPortV1BalancesGetValidateBeforeCall(String accountKey, String clientKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = openapiPortV1BalancesGetCall(accountKey, clientKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param accountKey  (optional)
     * @param clientKey  (optional)
     * @return Balances
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Balances openapiPortV1BalancesGet(String accountKey, String clientKey) throws ApiException {
        ApiResponse<Balances> resp = openapiPortV1BalancesGetWithHttpInfo(accountKey, clientKey);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param accountKey  (optional)
     * @param clientKey  (optional)
     * @return ApiResponse&lt;Balances&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Balances> openapiPortV1BalancesGetWithHttpInfo(String accountKey, String clientKey) throws ApiException {
        com.squareup.okhttp.Call call = openapiPortV1BalancesGetValidateBeforeCall(accountKey, clientKey, null, null);
        Type localVarReturnType = new TypeToken<Balances>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param accountKey  (optional)
     * @param clientKey  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call openapiPortV1BalancesGetAsync(String accountKey, String clientKey, final ApiCallback<Balances> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = openapiPortV1BalancesGetValidateBeforeCall(accountKey, clientKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Balances>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for openapiPortV1BalancesMeGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call openapiPortV1BalancesMeGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/openapi/port/v1/balances/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call openapiPortV1BalancesMeGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = openapiPortV1BalancesMeGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @return BalancesMe
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BalancesMe openapiPortV1BalancesMeGet() throws ApiException {
        ApiResponse<BalancesMe> resp = openapiPortV1BalancesMeGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;BalancesMe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BalancesMe> openapiPortV1BalancesMeGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = openapiPortV1BalancesMeGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<BalancesMe>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call openapiPortV1BalancesMeGetAsync(final ApiCallback<BalancesMe> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = openapiPortV1BalancesMeGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BalancesMe>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for openapiPortV1ClientsMeGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call openapiPortV1ClientsMeGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/openapi/port/v1/clients/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call openapiPortV1ClientsMeGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = openapiPortV1ClientsMeGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @return ClientsMe
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClientsMe openapiPortV1ClientsMeGet() throws ApiException {
        ApiResponse<ClientsMe> resp = openapiPortV1ClientsMeGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;ClientsMe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClientsMe> openapiPortV1ClientsMeGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = openapiPortV1ClientsMeGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ClientsMe>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call openapiPortV1ClientsMeGetAsync(final ApiCallback<ClientsMe> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = openapiPortV1ClientsMeGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClientsMe>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for openapiPortV1NetpositionsMeGet
     * @param $skip Optional number of elements to skip. (optional)
     * @param $top Optional number of elements to retrieve. (optional)
     * @param fieldGroups Optional. Specifies which data to return. Default is [PositionBase, PositionView] (optional)
     * @param priceMode Optional. Specifies the prices to be used when returning price dependent values. Default is “RegularTradingHours”. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call openapiPortV1NetpositionsMeGetCall(Integer $skip, Integer $top, String fieldGroups, String priceMode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/openapi/port/v1/netpositions/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if ($skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$skip", $skip));
        if ($top != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("$top", $top));
        if (fieldGroups != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("FieldGroups", fieldGroups));
        if (priceMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("PriceMode", priceMode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call openapiPortV1NetpositionsMeGetValidateBeforeCall(Integer $skip, Integer $top, String fieldGroups, String priceMode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = openapiPortV1NetpositionsMeGetCall($skip, $top, fieldGroups, priceMode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get positions for the logged-in client
     * @param $skip Optional number of elements to skip. (optional)
     * @param $top Optional number of elements to retrieve. (optional)
     * @param fieldGroups Optional. Specifies which data to return. Default is [PositionBase, PositionView] (optional)
     * @param priceMode Optional. Specifies the prices to be used when returning price dependent values. Default is “RegularTradingHours”. (optional)
     * @return NetPositionsMe
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NetPositionsMe openapiPortV1NetpositionsMeGet(Integer $skip, Integer $top, String fieldGroups, String priceMode) throws ApiException {
        ApiResponse<NetPositionsMe> resp = openapiPortV1NetpositionsMeGetWithHttpInfo($skip, $top, fieldGroups, priceMode);
        return resp.getData();
    }

    /**
     * 
     * Get positions for the logged-in client
     * @param $skip Optional number of elements to skip. (optional)
     * @param $top Optional number of elements to retrieve. (optional)
     * @param fieldGroups Optional. Specifies which data to return. Default is [PositionBase, PositionView] (optional)
     * @param priceMode Optional. Specifies the prices to be used when returning price dependent values. Default is “RegularTradingHours”. (optional)
     * @return ApiResponse&lt;NetPositionsMe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NetPositionsMe> openapiPortV1NetpositionsMeGetWithHttpInfo(Integer $skip, Integer $top, String fieldGroups, String priceMode) throws ApiException {
        com.squareup.okhttp.Call call = openapiPortV1NetpositionsMeGetValidateBeforeCall($skip, $top, fieldGroups, priceMode, null, null);
        Type localVarReturnType = new TypeToken<NetPositionsMe>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get positions for the logged-in client
     * @param $skip Optional number of elements to skip. (optional)
     * @param $top Optional number of elements to retrieve. (optional)
     * @param fieldGroups Optional. Specifies which data to return. Default is [PositionBase, PositionView] (optional)
     * @param priceMode Optional. Specifies the prices to be used when returning price dependent values. Default is “RegularTradingHours”. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call openapiPortV1NetpositionsMeGetAsync(Integer $skip, Integer $top, String fieldGroups, String priceMode, final ApiCallback<NetPositionsMe> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = openapiPortV1NetpositionsMeGetValidateBeforeCall($skip, $top, fieldGroups, priceMode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NetPositionsMe>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for openapiPortV1OrdersMeGet
     * @param fieldGroups  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call openapiPortV1OrdersMeGetCall(String fieldGroups, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/openapi/port/v1/orders/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fieldGroups != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fieldGroups", fieldGroups));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call openapiPortV1OrdersMeGetValidateBeforeCall(String fieldGroups, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = openapiPortV1OrdersMeGetCall(fieldGroups, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get open orders
     * @param fieldGroups  (optional)
     * @return OrderQuery
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderQuery openapiPortV1OrdersMeGet(String fieldGroups) throws ApiException {
        ApiResponse<OrderQuery> resp = openapiPortV1OrdersMeGetWithHttpInfo(fieldGroups);
        return resp.getData();
    }

    /**
     * 
     * Get open orders
     * @param fieldGroups  (optional)
     * @return ApiResponse&lt;OrderQuery&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderQuery> openapiPortV1OrdersMeGetWithHttpInfo(String fieldGroups) throws ApiException {
        com.squareup.okhttp.Call call = openapiPortV1OrdersMeGetValidateBeforeCall(fieldGroups, null, null);
        Type localVarReturnType = new TypeToken<OrderQuery>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get open orders
     * @param fieldGroups  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call openapiPortV1OrdersMeGetAsync(String fieldGroups, final ApiCallback<OrderQuery> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = openapiPortV1OrdersMeGetValidateBeforeCall(fieldGroups, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderQuery>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for openapiPortV1PositionsGet
     * @param skip Optional number of elements to skip. (optional)
     * @param top Optional number of elements to retrieve. (optional)
     * @param accountGroupKey The key of the account group to which the net positions belongs. (optional)
     * @param accountKey The key of the account to which the net positions belongs. (optional)
     * @param clientKey The key of the client to which the net positions belongs. (optional)
     * @param fieldGroups Specifies which data to return. Default is [PositionBase,PositionView]. See https://www.developer.saxo/openapi/referencedocs/port/v1/positions/getpositions/72425eee149f25fc39633a79f1d72885/positionfieldgroup/0a3d33a4c6705be8983d98e4fcd1fdf1 (optional)
     * @param netPositionId The id of the netposition to which the position belongs (optional)
     * @param positionId The id of the position. (optional)
     * @param watchlistId Selects only positions those instruments belongs to the given watchlist id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call openapiPortV1PositionsGetCall(Long skip, Long top, String accountGroupKey, String accountKey, String clientKey, String fieldGroups, String netPositionId, String positionId, String watchlistId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/openapi/port/v1/positions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (top != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("top", top));
        if (accountGroupKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountGroupKey", accountGroupKey));
        if (accountKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountKey", accountKey));
        if (clientKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ClientKey", clientKey));
        if (fieldGroups != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("FieldGroups", fieldGroups));
        if (netPositionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("NetPositionId", netPositionId));
        if (positionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("PositionId", positionId));
        if (watchlistId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("WatchlistId", watchlistId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call openapiPortV1PositionsGetValidateBeforeCall(Long skip, Long top, String accountGroupKey, String accountKey, String clientKey, String fieldGroups, String netPositionId, String positionId, String watchlistId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = openapiPortV1PositionsGetCall(skip, top, accountGroupKey, accountKey, clientKey, fieldGroups, netPositionId, positionId, watchlistId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Returns a list of positions fulfilling the criteria specified by the query string parameters.
     * @param skip Optional number of elements to skip. (optional)
     * @param top Optional number of elements to retrieve. (optional)
     * @param accountGroupKey The key of the account group to which the net positions belongs. (optional)
     * @param accountKey The key of the account to which the net positions belongs. (optional)
     * @param clientKey The key of the client to which the net positions belongs. (optional)
     * @param fieldGroups Specifies which data to return. Default is [PositionBase,PositionView]. See https://www.developer.saxo/openapi/referencedocs/port/v1/positions/getpositions/72425eee149f25fc39633a79f1d72885/positionfieldgroup/0a3d33a4c6705be8983d98e4fcd1fdf1 (optional)
     * @param netPositionId The id of the netposition to which the position belongs (optional)
     * @param positionId The id of the position. (optional)
     * @param watchlistId Selects only positions those instruments belongs to the given watchlist id (optional)
     * @return Positions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Positions openapiPortV1PositionsGet(Long skip, Long top, String accountGroupKey, String accountKey, String clientKey, String fieldGroups, String netPositionId, String positionId, String watchlistId) throws ApiException {
        ApiResponse<Positions> resp = openapiPortV1PositionsGetWithHttpInfo(skip, top, accountGroupKey, accountKey, clientKey, fieldGroups, netPositionId, positionId, watchlistId);
        return resp.getData();
    }

    /**
     * 
     * Returns a list of positions fulfilling the criteria specified by the query string parameters.
     * @param skip Optional number of elements to skip. (optional)
     * @param top Optional number of elements to retrieve. (optional)
     * @param accountGroupKey The key of the account group to which the net positions belongs. (optional)
     * @param accountKey The key of the account to which the net positions belongs. (optional)
     * @param clientKey The key of the client to which the net positions belongs. (optional)
     * @param fieldGroups Specifies which data to return. Default is [PositionBase,PositionView]. See https://www.developer.saxo/openapi/referencedocs/port/v1/positions/getpositions/72425eee149f25fc39633a79f1d72885/positionfieldgroup/0a3d33a4c6705be8983d98e4fcd1fdf1 (optional)
     * @param netPositionId The id of the netposition to which the position belongs (optional)
     * @param positionId The id of the position. (optional)
     * @param watchlistId Selects only positions those instruments belongs to the given watchlist id (optional)
     * @return ApiResponse&lt;Positions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Positions> openapiPortV1PositionsGetWithHttpInfo(Long skip, Long top, String accountGroupKey, String accountKey, String clientKey, String fieldGroups, String netPositionId, String positionId, String watchlistId) throws ApiException {
        com.squareup.okhttp.Call call = openapiPortV1PositionsGetValidateBeforeCall(skip, top, accountGroupKey, accountKey, clientKey, fieldGroups, netPositionId, positionId, watchlistId, null, null);
        Type localVarReturnType = new TypeToken<Positions>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of positions fulfilling the criteria specified by the query string parameters.
     * @param skip Optional number of elements to skip. (optional)
     * @param top Optional number of elements to retrieve. (optional)
     * @param accountGroupKey The key of the account group to which the net positions belongs. (optional)
     * @param accountKey The key of the account to which the net positions belongs. (optional)
     * @param clientKey The key of the client to which the net positions belongs. (optional)
     * @param fieldGroups Specifies which data to return. Default is [PositionBase,PositionView]. See https://www.developer.saxo/openapi/referencedocs/port/v1/positions/getpositions/72425eee149f25fc39633a79f1d72885/positionfieldgroup/0a3d33a4c6705be8983d98e4fcd1fdf1 (optional)
     * @param netPositionId The id of the netposition to which the position belongs (optional)
     * @param positionId The id of the position. (optional)
     * @param watchlistId Selects only positions those instruments belongs to the given watchlist id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call openapiPortV1PositionsGetAsync(Long skip, Long top, String accountGroupKey, String accountKey, String clientKey, String fieldGroups, String netPositionId, String positionId, String watchlistId, final ApiCallback<Positions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = openapiPortV1PositionsGetValidateBeforeCall(skip, top, accountGroupKey, accountKey, clientKey, fieldGroups, netPositionId, positionId, watchlistId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Positions>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for openapiPortV1UsersMeGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call openapiPortV1UsersMeGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/openapi/port/v1/users/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call openapiPortV1UsersMeGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = openapiPortV1UsersMeGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @return UsersMe
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UsersMe openapiPortV1UsersMeGet() throws ApiException {
        ApiResponse<UsersMe> resp = openapiPortV1UsersMeGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;UsersMe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UsersMe> openapiPortV1UsersMeGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = openapiPortV1UsersMeGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<UsersMe>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call openapiPortV1UsersMeGetAsync(final ApiCallback<UsersMe> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = openapiPortV1UsersMeGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UsersMe>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for openapiRefV1InstrumentsDetailsGet
     * @param accountKey If specified, access permissions to instruments for the specified account will be evaluated. Optional. (optional)
     * @param assetTypes Comma separated list of one or more asset types to search for. E.g. AssetTypes&#x3D;FxSpot,Stock. See https://www.developer.saxo/openapi/referencedocs/ref/v1/instruments/getdetailsformanyinstruments/ad9c80ea6ddc7c7974d653e45a495f87/assettype/c9311a0d718a7ee55bd9b386f1514d00 (optional)
     * @param fieldGroups Specifies comma-separated list of additional fields to receive. See https://www.developer.saxo/openapi/referencedocs/ref/v1/instruments/getdetailsformanyinstruments/ad9c80ea6ddc7c7974d653e45a495f87/instrumentfieldgroup/274dbc7f4d3bdd2fbf04928ca746a9c4 (optional)
     * @param tags Allows filtering by display hint, on Stocks, ETFs and ETCs are currently supported. Use &lt;value&gt;null&lt;/value&gt; to indicate Tag should not be included in search criteria. Currently only one tag is supported. (optional)
     * @param uics Limit list to return information for the following Uics. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call openapiRefV1InstrumentsDetailsGetCall(String accountKey, String assetTypes, String fieldGroups, String tags, BigDecimal uics, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/openapi/ref/v1/instruments/details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountKey", accountKey));
        if (assetTypes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AssetTypes", assetTypes));
        if (fieldGroups != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("FieldGroups", fieldGroups));
        if (tags != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Tags", tags));
        if (uics != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Uics", uics));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call openapiRefV1InstrumentsDetailsGetValidateBeforeCall(String accountKey, String assetTypes, String fieldGroups, String tags, BigDecimal uics, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = openapiRefV1InstrumentsDetailsGetCall(accountKey, assetTypes, fieldGroups, tags, uics, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param accountKey If specified, access permissions to instruments for the specified account will be evaluated. Optional. (optional)
     * @param assetTypes Comma separated list of one or more asset types to search for. E.g. AssetTypes&#x3D;FxSpot,Stock. See https://www.developer.saxo/openapi/referencedocs/ref/v1/instruments/getdetailsformanyinstruments/ad9c80ea6ddc7c7974d653e45a495f87/assettype/c9311a0d718a7ee55bd9b386f1514d00 (optional)
     * @param fieldGroups Specifies comma-separated list of additional fields to receive. See https://www.developer.saxo/openapi/referencedocs/ref/v1/instruments/getdetailsformanyinstruments/ad9c80ea6ddc7c7974d653e45a495f87/instrumentfieldgroup/274dbc7f4d3bdd2fbf04928ca746a9c4 (optional)
     * @param tags Allows filtering by display hint, on Stocks, ETFs and ETCs are currently supported. Use &lt;value&gt;null&lt;/value&gt; to indicate Tag should not be included in search criteria. Currently only one tag is supported. (optional)
     * @param uics Limit list to return information for the following Uics. (optional)
     * @return InstrumentsDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InstrumentsDetails openapiRefV1InstrumentsDetailsGet(String accountKey, String assetTypes, String fieldGroups, String tags, BigDecimal uics) throws ApiException {
        ApiResponse<InstrumentsDetails> resp = openapiRefV1InstrumentsDetailsGetWithHttpInfo(accountKey, assetTypes, fieldGroups, tags, uics);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param accountKey If specified, access permissions to instruments for the specified account will be evaluated. Optional. (optional)
     * @param assetTypes Comma separated list of one or more asset types to search for. E.g. AssetTypes&#x3D;FxSpot,Stock. See https://www.developer.saxo/openapi/referencedocs/ref/v1/instruments/getdetailsformanyinstruments/ad9c80ea6ddc7c7974d653e45a495f87/assettype/c9311a0d718a7ee55bd9b386f1514d00 (optional)
     * @param fieldGroups Specifies comma-separated list of additional fields to receive. See https://www.developer.saxo/openapi/referencedocs/ref/v1/instruments/getdetailsformanyinstruments/ad9c80ea6ddc7c7974d653e45a495f87/instrumentfieldgroup/274dbc7f4d3bdd2fbf04928ca746a9c4 (optional)
     * @param tags Allows filtering by display hint, on Stocks, ETFs and ETCs are currently supported. Use &lt;value&gt;null&lt;/value&gt; to indicate Tag should not be included in search criteria. Currently only one tag is supported. (optional)
     * @param uics Limit list to return information for the following Uics. (optional)
     * @return ApiResponse&lt;InstrumentsDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InstrumentsDetails> openapiRefV1InstrumentsDetailsGetWithHttpInfo(String accountKey, String assetTypes, String fieldGroups, String tags, BigDecimal uics) throws ApiException {
        com.squareup.okhttp.Call call = openapiRefV1InstrumentsDetailsGetValidateBeforeCall(accountKey, assetTypes, fieldGroups, tags, uics, null, null);
        Type localVarReturnType = new TypeToken<InstrumentsDetails>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param accountKey If specified, access permissions to instruments for the specified account will be evaluated. Optional. (optional)
     * @param assetTypes Comma separated list of one or more asset types to search for. E.g. AssetTypes&#x3D;FxSpot,Stock. See https://www.developer.saxo/openapi/referencedocs/ref/v1/instruments/getdetailsformanyinstruments/ad9c80ea6ddc7c7974d653e45a495f87/assettype/c9311a0d718a7ee55bd9b386f1514d00 (optional)
     * @param fieldGroups Specifies comma-separated list of additional fields to receive. See https://www.developer.saxo/openapi/referencedocs/ref/v1/instruments/getdetailsformanyinstruments/ad9c80ea6ddc7c7974d653e45a495f87/instrumentfieldgroup/274dbc7f4d3bdd2fbf04928ca746a9c4 (optional)
     * @param tags Allows filtering by display hint, on Stocks, ETFs and ETCs are currently supported. Use &lt;value&gt;null&lt;/value&gt; to indicate Tag should not be included in search criteria. Currently only one tag is supported. (optional)
     * @param uics Limit list to return information for the following Uics. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call openapiRefV1InstrumentsDetailsGetAsync(String accountKey, String assetTypes, String fieldGroups, String tags, BigDecimal uics, final ApiCallback<InstrumentsDetails> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = openapiRefV1InstrumentsDetailsGetValidateBeforeCall(accountKey, assetTypes, fieldGroups, tags, uics, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InstrumentsDetails>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for openapiRefV1InstrumentsDetailsUicAssetTypeGet
     * @param uic The Universal Instrument Code (UIC) of the instrument to get. (required)
     * @param assetType The AssetType of the instrument to get. See https://www.developer.saxo/openapi/referencedocs/ref/v1/instruments/getdetailsforoneinstrument/4e547901bf01a81683b01ee9ed9aca0b/assettype/c9311a0d718a7ee55bd9b386f1514d00 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call openapiRefV1InstrumentsDetailsUicAssetTypeGetCall(Long uic, String assetType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/openapi/ref/v1/instruments/details/{Uic}/{AssetType}"
            .replaceAll("\\{" + "Uic" + "\\}", apiClient.escapeString(uic.toString()))
            .replaceAll("\\{" + "AssetType" + "\\}", apiClient.escapeString(assetType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call openapiRefV1InstrumentsDetailsUicAssetTypeGetValidateBeforeCall(Long uic, String assetType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'uic' is set
        if (uic == null) {
            throw new ApiException("Missing the required parameter 'uic' when calling openapiRefV1InstrumentsDetailsUicAssetTypeGet(Async)");
        }
        // verify the required parameter 'assetType' is set
        if (assetType == null) {
            throw new ApiException("Missing the required parameter 'assetType' when calling openapiRefV1InstrumentsDetailsUicAssetTypeGet(Async)");
        }
        
        com.squareup.okhttp.Call call = openapiRefV1InstrumentsDetailsUicAssetTypeGetCall(uic, assetType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param uic The Universal Instrument Code (UIC) of the instrument to get. (required)
     * @param assetType The AssetType of the instrument to get. See https://www.developer.saxo/openapi/referencedocs/ref/v1/instruments/getdetailsforoneinstrument/4e547901bf01a81683b01ee9ed9aca0b/assettype/c9311a0d718a7ee55bd9b386f1514d00 (required)
     * @return InstrumentDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InstrumentDetail openapiRefV1InstrumentsDetailsUicAssetTypeGet(Long uic, String assetType) throws ApiException {
        ApiResponse<InstrumentDetail> resp = openapiRefV1InstrumentsDetailsUicAssetTypeGetWithHttpInfo(uic, assetType);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param uic The Universal Instrument Code (UIC) of the instrument to get. (required)
     * @param assetType The AssetType of the instrument to get. See https://www.developer.saxo/openapi/referencedocs/ref/v1/instruments/getdetailsforoneinstrument/4e547901bf01a81683b01ee9ed9aca0b/assettype/c9311a0d718a7ee55bd9b386f1514d00 (required)
     * @return ApiResponse&lt;InstrumentDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InstrumentDetail> openapiRefV1InstrumentsDetailsUicAssetTypeGetWithHttpInfo(Long uic, String assetType) throws ApiException {
        com.squareup.okhttp.Call call = openapiRefV1InstrumentsDetailsUicAssetTypeGetValidateBeforeCall(uic, assetType, null, null);
        Type localVarReturnType = new TypeToken<InstrumentDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param uic The Universal Instrument Code (UIC) of the instrument to get. (required)
     * @param assetType The AssetType of the instrument to get. See https://www.developer.saxo/openapi/referencedocs/ref/v1/instruments/getdetailsforoneinstrument/4e547901bf01a81683b01ee9ed9aca0b/assettype/c9311a0d718a7ee55bd9b386f1514d00 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call openapiRefV1InstrumentsDetailsUicAssetTypeGetAsync(Long uic, String assetType, final ApiCallback<InstrumentDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = openapiRefV1InstrumentsDetailsUicAssetTypeGetValidateBeforeCall(uic, assetType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InstrumentDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for openapiRefV1InstrumentsGet
     * @param keyWords Search for matching keywords in the instruments. Separate keywords with spaces. (optional)
     * @param assetTypes Further constrains the list to only include the provided instruments, e.g. FxSpot. See https://www.developer.saxo/openapi/referencedocs/ref/v1/instruments/getsummaries/7f1a5b8199f43fc1d794ce9e279d8c34 (optional)
     * @param propertyClass The class of the instruments to include in the search. See https://www.developer.saxo/openapi/referencedocs/ref/v1/instruments/getsummaries/7f1a5b8199f43fc1d794ce9e279d8c34/class/0d5bf0f9272bc3a3204368cceedf7d54 (optional)
     * @param exchangeId ID of the exchange that the instruments must match. (optional)
     * @param uics Limit list to return information for the following Uics (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call openapiRefV1InstrumentsGetCall(String keyWords, String assetTypes, String propertyClass, String exchangeId, BigDecimal uics, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/openapi/ref/v1/instruments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyWords != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("KeyWords", keyWords));
        if (assetTypes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AssetTypes", assetTypes));
        if (propertyClass != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Class", propertyClass));
        if (exchangeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ExchangeId", exchangeId));
        if (uics != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Uics", uics));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call openapiRefV1InstrumentsGetValidateBeforeCall(String keyWords, String assetTypes, String propertyClass, String exchangeId, BigDecimal uics, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = openapiRefV1InstrumentsGetCall(keyWords, assetTypes, propertyClass, exchangeId, uics, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param keyWords Search for matching keywords in the instruments. Separate keywords with spaces. (optional)
     * @param assetTypes Further constrains the list to only include the provided instruments, e.g. FxSpot. See https://www.developer.saxo/openapi/referencedocs/ref/v1/instruments/getsummaries/7f1a5b8199f43fc1d794ce9e279d8c34 (optional)
     * @param propertyClass The class of the instruments to include in the search. See https://www.developer.saxo/openapi/referencedocs/ref/v1/instruments/getsummaries/7f1a5b8199f43fc1d794ce9e279d8c34/class/0d5bf0f9272bc3a3204368cceedf7d54 (optional)
     * @param exchangeId ID of the exchange that the instruments must match. (optional)
     * @param uics Limit list to return information for the following Uics (optional)
     * @return Instruments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Instruments openapiRefV1InstrumentsGet(String keyWords, String assetTypes, String propertyClass, String exchangeId, BigDecimal uics) throws ApiException {
        ApiResponse<Instruments> resp = openapiRefV1InstrumentsGetWithHttpInfo(keyWords, assetTypes, propertyClass, exchangeId, uics);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param keyWords Search for matching keywords in the instruments. Separate keywords with spaces. (optional)
     * @param assetTypes Further constrains the list to only include the provided instruments, e.g. FxSpot. See https://www.developer.saxo/openapi/referencedocs/ref/v1/instruments/getsummaries/7f1a5b8199f43fc1d794ce9e279d8c34 (optional)
     * @param propertyClass The class of the instruments to include in the search. See https://www.developer.saxo/openapi/referencedocs/ref/v1/instruments/getsummaries/7f1a5b8199f43fc1d794ce9e279d8c34/class/0d5bf0f9272bc3a3204368cceedf7d54 (optional)
     * @param exchangeId ID of the exchange that the instruments must match. (optional)
     * @param uics Limit list to return information for the following Uics (optional)
     * @return ApiResponse&lt;Instruments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Instruments> openapiRefV1InstrumentsGetWithHttpInfo(String keyWords, String assetTypes, String propertyClass, String exchangeId, BigDecimal uics) throws ApiException {
        com.squareup.okhttp.Call call = openapiRefV1InstrumentsGetValidateBeforeCall(keyWords, assetTypes, propertyClass, exchangeId, uics, null, null);
        Type localVarReturnType = new TypeToken<Instruments>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param keyWords Search for matching keywords in the instruments. Separate keywords with spaces. (optional)
     * @param assetTypes Further constrains the list to only include the provided instruments, e.g. FxSpot. See https://www.developer.saxo/openapi/referencedocs/ref/v1/instruments/getsummaries/7f1a5b8199f43fc1d794ce9e279d8c34 (optional)
     * @param propertyClass The class of the instruments to include in the search. See https://www.developer.saxo/openapi/referencedocs/ref/v1/instruments/getsummaries/7f1a5b8199f43fc1d794ce9e279d8c34/class/0d5bf0f9272bc3a3204368cceedf7d54 (optional)
     * @param exchangeId ID of the exchange that the instruments must match. (optional)
     * @param uics Limit list to return information for the following Uics (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call openapiRefV1InstrumentsGetAsync(String keyWords, String assetTypes, String propertyClass, String exchangeId, BigDecimal uics, final ApiCallback<Instruments> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = openapiRefV1InstrumentsGetValidateBeforeCall(keyWords, assetTypes, propertyClass, exchangeId, uics, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Instruments>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for openapiTradeV1InfopricesGet
     * @param uic The Universal Instrument Code (UIC) of the instrument to get. (required)
     * @param assetType The AssetType of the instrument to get. See https://www.developer.saxo/openapi/referencedocs/ref/v1/instruments/getdetailsforoneinstrument/4e547901bf01a81683b01ee9ed9aca0b/assettype/c9311a0d718a7ee55bd9b386f1514d00 (required)
     * @param accountKey Unique key identifying the account used in retrieving the price. Only required when calling context represents an authenticated user. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call openapiTradeV1InfopricesGetCall(Long uic, String assetType, String accountKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/openapi/trade/v1/infoprices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (uic != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Uic", uic));
        if (assetType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AssetType", assetType));
        if (accountKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountKey", accountKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call openapiTradeV1InfopricesGetValidateBeforeCall(Long uic, String assetType, String accountKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'uic' is set
        if (uic == null) {
            throw new ApiException("Missing the required parameter 'uic' when calling openapiTradeV1InfopricesGet(Async)");
        }
        // verify the required parameter 'assetType' is set
        if (assetType == null) {
            throw new ApiException("Missing the required parameter 'assetType' when calling openapiTradeV1InfopricesGet(Async)");
        }
        // verify the required parameter 'accountKey' is set
        if (accountKey == null) {
            throw new ApiException("Missing the required parameter 'accountKey' when calling openapiTradeV1InfopricesGet(Async)");
        }
        
        com.squareup.okhttp.Call call = openapiTradeV1InfopricesGetCall(uic, assetType, accountKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param uic The Universal Instrument Code (UIC) of the instrument to get. (required)
     * @param assetType The AssetType of the instrument to get. See https://www.developer.saxo/openapi/referencedocs/ref/v1/instruments/getdetailsforoneinstrument/4e547901bf01a81683b01ee9ed9aca0b/assettype/c9311a0d718a7ee55bd9b386f1514d00 (required)
     * @param accountKey Unique key identifying the account used in retrieving the price. Only required when calling context represents an authenticated user. (required)
     * @return InfoPrice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfoPrice openapiTradeV1InfopricesGet(Long uic, String assetType, String accountKey) throws ApiException {
        ApiResponse<InfoPrice> resp = openapiTradeV1InfopricesGetWithHttpInfo(uic, assetType, accountKey);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param uic The Universal Instrument Code (UIC) of the instrument to get. (required)
     * @param assetType The AssetType of the instrument to get. See https://www.developer.saxo/openapi/referencedocs/ref/v1/instruments/getdetailsforoneinstrument/4e547901bf01a81683b01ee9ed9aca0b/assettype/c9311a0d718a7ee55bd9b386f1514d00 (required)
     * @param accountKey Unique key identifying the account used in retrieving the price. Only required when calling context represents an authenticated user. (required)
     * @return ApiResponse&lt;InfoPrice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfoPrice> openapiTradeV1InfopricesGetWithHttpInfo(Long uic, String assetType, String accountKey) throws ApiException {
        com.squareup.okhttp.Call call = openapiTradeV1InfopricesGetValidateBeforeCall(uic, assetType, accountKey, null, null);
        Type localVarReturnType = new TypeToken<InfoPrice>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param uic The Universal Instrument Code (UIC) of the instrument to get. (required)
     * @param assetType The AssetType of the instrument to get. See https://www.developer.saxo/openapi/referencedocs/ref/v1/instruments/getdetailsforoneinstrument/4e547901bf01a81683b01ee9ed9aca0b/assettype/c9311a0d718a7ee55bd9b386f1514d00 (required)
     * @param accountKey Unique key identifying the account used in retrieving the price. Only required when calling context represents an authenticated user. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call openapiTradeV1InfopricesGetAsync(Long uic, String assetType, String accountKey, final ApiCallback<InfoPrice> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = openapiTradeV1InfopricesGetValidateBeforeCall(uic, assetType, accountKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfoPrice>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for openapiTradeV2OrdersDelete
     * @param accountKey Account key. (required)
     * @param assetType Asset type. See https://www.developer.saxo/openapi/referencedocs/trade/v2/orders/cancelallorder/261fb62628b4c2cc9278b170429c16fb/assettype/c9311a0d718a7ee55bd9b386f1514d00 (required)
     * @param uic Instrument UIC. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call openapiTradeV2OrdersDeleteCall(String accountKey, String assetType, Long uic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/openapi/trade/v2/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountKey", accountKey));
        if (assetType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AssetType", assetType));
        if (uic != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Uic", uic));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call openapiTradeV2OrdersDeleteValidateBeforeCall(String accountKey, String assetType, Long uic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountKey' is set
        if (accountKey == null) {
            throw new ApiException("Missing the required parameter 'accountKey' when calling openapiTradeV2OrdersDelete(Async)");
        }
        // verify the required parameter 'assetType' is set
        if (assetType == null) {
            throw new ApiException("Missing the required parameter 'assetType' when calling openapiTradeV2OrdersDelete(Async)");
        }
        // verify the required parameter 'uic' is set
        if (uic == null) {
            throw new ApiException("Missing the required parameter 'uic' when calling openapiTradeV2OrdersDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = openapiTradeV2OrdersDeleteCall(accountKey, assetType, uic, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Cancels all orders for requested instrument and account.
     * @param accountKey Account key. (required)
     * @param assetType Asset type. See https://www.developer.saxo/openapi/referencedocs/trade/v2/orders/cancelallorder/261fb62628b4c2cc9278b170429c16fb/assettype/c9311a0d718a7ee55bd9b386f1514d00 (required)
     * @param uic Instrument UIC. (required)
     * @return OrdersCancel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrdersCancel openapiTradeV2OrdersDelete(String accountKey, String assetType, Long uic) throws ApiException {
        ApiResponse<OrdersCancel> resp = openapiTradeV2OrdersDeleteWithHttpInfo(accountKey, assetType, uic);
        return resp.getData();
    }

    /**
     * 
     * Cancels all orders for requested instrument and account.
     * @param accountKey Account key. (required)
     * @param assetType Asset type. See https://www.developer.saxo/openapi/referencedocs/trade/v2/orders/cancelallorder/261fb62628b4c2cc9278b170429c16fb/assettype/c9311a0d718a7ee55bd9b386f1514d00 (required)
     * @param uic Instrument UIC. (required)
     * @return ApiResponse&lt;OrdersCancel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrdersCancel> openapiTradeV2OrdersDeleteWithHttpInfo(String accountKey, String assetType, Long uic) throws ApiException {
        com.squareup.okhttp.Call call = openapiTradeV2OrdersDeleteValidateBeforeCall(accountKey, assetType, uic, null, null);
        Type localVarReturnType = new TypeToken<OrdersCancel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Cancels all orders for requested instrument and account.
     * @param accountKey Account key. (required)
     * @param assetType Asset type. See https://www.developer.saxo/openapi/referencedocs/trade/v2/orders/cancelallorder/261fb62628b4c2cc9278b170429c16fb/assettype/c9311a0d718a7ee55bd9b386f1514d00 (required)
     * @param uic Instrument UIC. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call openapiTradeV2OrdersDeleteAsync(String accountKey, String assetType, Long uic, final ApiCallback<OrdersCancel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = openapiTradeV2OrdersDeleteValidateBeforeCall(accountKey, assetType, uic, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrdersCancel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for openapiTradeV2OrdersOrderIdsDelete
     * @param orderIds order ID to cancel (required)
     * @param accountKey account key (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call openapiTradeV2OrdersOrderIdsDeleteCall(Long orderIds, String accountKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/openapi/trade/v2/orders/{OrderIds}"
            .replaceAll("\\{" + "OrderIds" + "\\}", apiClient.escapeString(orderIds.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountKey", accountKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call openapiTradeV2OrdersOrderIdsDeleteValidateBeforeCall(Long orderIds, String accountKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'orderIds' is set
        if (orderIds == null) {
            throw new ApiException("Missing the required parameter 'orderIds' when calling openapiTradeV2OrdersOrderIdsDelete(Async)");
        }
        // verify the required parameter 'accountKey' is set
        if (accountKey == null) {
            throw new ApiException("Missing the required parameter 'accountKey' when calling openapiTradeV2OrdersOrderIdsDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = openapiTradeV2OrdersOrderIdsDeleteCall(orderIds, accountKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Cancels one or more orders.
     * @param orderIds order ID to cancel (required)
     * @param accountKey account key (required)
     * @return OrderCancel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderCancel openapiTradeV2OrdersOrderIdsDelete(Long orderIds, String accountKey) throws ApiException {
        ApiResponse<OrderCancel> resp = openapiTradeV2OrdersOrderIdsDeleteWithHttpInfo(orderIds, accountKey);
        return resp.getData();
    }

    /**
     * 
     * Cancels one or more orders.
     * @param orderIds order ID to cancel (required)
     * @param accountKey account key (required)
     * @return ApiResponse&lt;OrderCancel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderCancel> openapiTradeV2OrdersOrderIdsDeleteWithHttpInfo(Long orderIds, String accountKey) throws ApiException {
        com.squareup.okhttp.Call call = openapiTradeV2OrdersOrderIdsDeleteValidateBeforeCall(orderIds, accountKey, null, null);
        Type localVarReturnType = new TypeToken<OrderCancel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Cancels one or more orders.
     * @param orderIds order ID to cancel (required)
     * @param accountKey account key (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call openapiTradeV2OrdersOrderIdsDeleteAsync(Long orderIds, String accountKey, final ApiCallback<OrderCancel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = openapiTradeV2OrdersOrderIdsDeleteValidateBeforeCall(orderIds, accountKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderCancel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for openapiTradeV2OrdersPatch
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call openapiTradeV2OrdersPatchCall(V2OrdersBody1 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/openapi/trade/v2/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call openapiTradeV2OrdersPatchValidateBeforeCall(V2OrdersBody1 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = openapiTradeV2OrdersPatchCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Changes one or more existing orders.
     * @param body  (optional)
     * @return OrderPatchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderPatchResponse openapiTradeV2OrdersPatch(V2OrdersBody1 body) throws ApiException {
        ApiResponse<OrderPatchResponse> resp = openapiTradeV2OrdersPatchWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * Changes one or more existing orders.
     * @param body  (optional)
     * @return ApiResponse&lt;OrderPatchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderPatchResponse> openapiTradeV2OrdersPatchWithHttpInfo(V2OrdersBody1 body) throws ApiException {
        com.squareup.okhttp.Call call = openapiTradeV2OrdersPatchValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<OrderPatchResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Changes one or more existing orders.
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call openapiTradeV2OrdersPatchAsync(V2OrdersBody1 body, final ApiCallback<OrderPatchResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = openapiTradeV2OrdersPatchValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderPatchResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for openapiTradeV2OrdersPost
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call openapiTradeV2OrdersPostCall(V2OrdersBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/openapi/trade/v2/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call openapiTradeV2OrdersPostValidateBeforeCall(V2OrdersBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = openapiTradeV2OrdersPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Place a new order
     * @param body  (optional)
     * @return OrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderResponse openapiTradeV2OrdersPost(V2OrdersBody body) throws ApiException {
        ApiResponse<OrderResponse> resp = openapiTradeV2OrdersPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * Place a new order
     * @param body  (optional)
     * @return ApiResponse&lt;OrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderResponse> openapiTradeV2OrdersPostWithHttpInfo(V2OrdersBody body) throws ApiException {
        com.squareup.okhttp.Call call = openapiTradeV2OrdersPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<OrderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Place a new order
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call openapiTradeV2OrdersPostAsync(V2OrdersBody body, final ApiCallback<OrderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = openapiTradeV2OrdersPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
